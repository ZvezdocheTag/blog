<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jxnblog]]></title><description><![CDATA[The writing of Brent Jackson]]></description><link>https://jxnblk.com/blog</link><generator>RSS for Node</generator><lastBuildDate>Thu, 25 Jul 2019 14:27:21 GMT</lastBuildDate><item><title><![CDATA[Code Literacy]]></title><description><![CDATA[Ah yes, everyone's favorite question:  should designers code? 
As much as I'd love to pontificate on the matter,
I think the framing of this…]]></description><link>https://jxnblk.com/blog/code-literacy/</link><guid isPermaLink="false">https://jxnblk.com/blog/code-literacy/</guid><pubDate>Thu, 25 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Ah yes, everyone&amp;#x27;s favorite question: &lt;em class=&quot;css-0&quot;&gt;should designers code?&lt;/em&gt;
As much as I&amp;#x27;d love to pontificate on the matter,
I think the framing of this question is fundamentally wrong.
At the heart of this conversation is the idea of &lt;em class=&quot;css-0&quot;&gt;code literacy&lt;/em&gt;,
that is, the level at which one can read, write, and understand software code in the form of programming languages.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;We don&amp;#x27;t question whether or not we should teach children to read and write,
or whether we should math in school.
In a modern public education systems, these are a given.
While these institutions might have other problems,
I think code literacy should be a fundamental part of any school cirriculum.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;What &lt;em class=&quot;css-0&quot;&gt;is&lt;/em&gt; code? Paul Ford has &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/&quot; class=&quot;css-1o1roib&quot;&gt;already written&lt;/a&gt; more that enough to cover that topic,
but I&amp;#x27;d like to step back and consider how code is not dissimilar to written language and mathematics.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While spoken languages are innate, we humans invented written language somewhat recently in our own history.
Speaking comes naturally, but written language is not hard-wired into our brains.
We naturally think in symbols, and most of us are able to handle reading and writing,
but it&amp;#x27;s still something that we invented.
It&amp;#x27;s a powerful tool that allows us to transfer knowledge over space and time in ways we couldn&amp;#x27;t do without it.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Math, too, is symbolic in nature.
It&amp;#x27;s not entirely dependent on written language,
but math certainly benefits from our ability to scribble lines on paper.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Code is the languages we humans use to communicate with computers.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Think about this for a second:&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;The computer is the first tool that we&amp;#x27;ve created that &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;requires&lt;/strong&gt; written language to even work.&lt;/em&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Without software, computers are useless.
Perhaps, one day, computers might fluently speak natural human languages,
but there will always be code underlying the abstractions that enable this.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Some people are interested in abstracting away the code required to program computers,
which can make computers accessible in ways they weren&amp;#x27;t before.
But saying that code will become less and less fundamental to the progress of technology
is akin to saying that no one needs to learn mathematics because we have calculators now.
If anything, the opposite is true.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I suspect that the invention of software might be on par with the invention of mathematics,
but we&amp;#x27;re too close to the event to see its historical significance.
Mathematics is broad and broadly applicable and works at a much lower level than code -
software isn&amp;#x27;t really possible without mathematics, afterall.
But this is the first time in human history where we&amp;#x27;ve created a technology that requires written language (i.e. software) to operate.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Not everyone in a modern society needs to be a poet, or a bestselling author, or have a PhD in mathematics,
but I think having basic reading, writing, and arithmetic skills will benefit anyone.
I think the same is true for code literacy.
Not everyone needs to be a software developer,
but the more you know about how humans communicate with machines,
the more benefits you&amp;#x27;ll see professionally.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Imagine you work in the finance industry and have figured out a way to mitigate all the billions of dollars lost on spreadsheet errors.
Or imagine you&amp;#x27;re a farmer who leverages machine learning to predict crop yields.
You &lt;em class=&quot;css-0&quot;&gt;could&lt;/em&gt; wait for software developers to create this for you,
but diverse experiences applied to different technologies can result in incredible innovation.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I don&amp;#x27;t think we should expect someone in a non-developer role to read and write code professionally.
But I also think the people who are curious and who learn a little more than their peers
will always have the advantage.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Portability]]></title><description><![CDATA[In software development, formats help ensure that content and data are portable and can be used in many different applications.
By adhering…]]></description><link>https://jxnblk.com/blog/portability/</link><guid isPermaLink="false">https://jxnblk.com/blog/portability/</guid><pubDate>Tue, 23 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In software development, formats help ensure that content and data are portable and can be used in many different applications.
By adhering to HTML standards set by the WHATWG and W3C, browsers created by different organizations
can render HTML documents created by many different people and generated in many different ways.
That is, HTML is a portable format that can be rendered by many different clients.
While HTML is certainly one of the most successful examples of standardization ever,
less widely used formats can still benefit from the same idea.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Take Markdown as an example.
It was created in 2004 by John Gruber and Aaron Swartz, and today is the de facto format for writing software documentation.
It isn&amp;#x27;t widely used outside the field of software development,
but there are many different engines that can render this format into HTML.
Markdown has become a somewhat portable format.
By writing documentation, blog posts, or wiki pages in this format,
you can use many different tools to render the content in different places,
and you can be fairly certain that there will always be tools that can render this format in the future.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Markdown was intended to be &lt;em class=&quot;css-0&quot;&gt;easy-to-read and easy-to-write&lt;/em&gt;, and can be viewed as a simple abstraction on top of HTML.
A complete HTML page cannot be replaced by Markdown, but all Markdown files can be written as HTML.
Most people find markdown simpler to read and write than raw HTML, and prefer using it for things like blog posts and documentation.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In the same way that Markdown has found a niche in certain contexts for authoring HTML,
I&amp;#x27;m very interested in taking this idea and applying it to CSS.
&lt;em class=&quot;css-0&quot;&gt;&amp;quot;But, CSS is already easy to read and write,&amp;quot;&lt;/em&gt; you might say.
Sure, but when I&amp;#x27;m considering which styles differ the most across different interfaces and which styles make the biggest impact,
I&amp;#x27;m mostly concerned with three things: &lt;em class=&quot;css-0&quot;&gt;color&lt;/em&gt;, &lt;em class=&quot;css-0&quot;&gt;typography&lt;/em&gt;, and &lt;em class=&quot;css-0&quot;&gt;layout&lt;/em&gt;.
Authoring an entire stylesheet to apply styles like this can require some effort,
and the end result isn&amp;#x27;t as portable as you might think.
Simply copying a stylesheet from one website to another does not guarantee that the styles will be applied the way you intend them to be.
A lightweight abstraction for this sort of thing, however, could make these sorts of styles more portable.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Unlike Markdown, I do not think this requires inventing new syntax.
With the existing syntaxes for CSS, JavaScript, JSON, YAML, and others, there are already plenty of tools that can handle parsing.
This &lt;em class=&quot;css-0&quot;&gt;does&lt;/em&gt;, however, require a specific shape or schema to be successful,
and the &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://system-ui.com/theme&quot; class=&quot;css-1o1roib&quot;&gt;Theme Specification&lt;/a&gt; is meant to be a simpler way to write styles for an application.
While &lt;a href=&quot;https://theme-ui.com&quot; class=&quot;css-1o1roib&quot;&gt;Theme UI&lt;/a&gt; (which is built with the Theme Specification) &lt;em class=&quot;css-0&quot;&gt;can&lt;/em&gt; output stylesheets in the form of &lt;a href=&quot;https://theme-ui.com/css/tachyons&quot; class=&quot;css-1o1roib&quot;&gt;Tachyons&lt;/a&gt; and other similar CSS libraries, it cannot fully replace CSS on its own.
It does provide a level of portability for sets of colors, typographic styles,
and other design constraints that can be applied in many different places.
As the number of libraries that follow this Theme Specification increases,
you will be able to reuse these styles in more and more places,
making it a more portable format for sharing styles.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Themeability]]></title><description><![CDATA[I've been interested in the idea of constraint-based design for a while.
By constraining the solution space for a particular problem,
new…]]></description><link>https://jxnblk.com/blog/themeability/</link><guid isPermaLink="false">https://jxnblk.com/blog/themeability/</guid><pubDate>Sun, 21 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I&amp;#x27;ve been interested in the idea of constraint-based design for a while.
By constraining the solution space for a particular problem,
new and novel ideas can emerge beyond the initial problem&amp;#x27;s scope.
In the context of UI design,
when you don&amp;#x27;t need to decide whether a heading&amp;#x27;s font size should be 22 or 24 pixels,
you have more time to decide what that heading should say in the first place or whether there should be a heading at all.
Like other tools aimed at promoting creative focus,
design constraints can help create a distraction-free environment for creative thought.
Design constraints can be viewed as a sort of &lt;em class=&quot;css-0&quot;&gt;&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs&quot; class=&quot;css-1o1roib&quot;&gt;hierarchy of needs&lt;/a&gt;&lt;/em&gt; –
when you stop spending energy on lower-level problems,
you can start exploring higher level abstractions in design.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I&amp;#x27;ve tried to distill some of this thinking into several different open source libraries over the years,
notably &lt;a href=&quot;https://basscss.com&quot; class=&quot;css-1o1roib&quot;&gt;Basscss&lt;/a&gt;, &lt;a href=&quot;https://rebassjs.org&quot; class=&quot;css-1o1roib&quot;&gt;Rebass&lt;/a&gt;, and &lt;a href=&quot;https://styled-system.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled System&lt;/a&gt;.
While libraries like Basscss and Rebass were certainly not instant hits,
some of their core ideas have slowly gained traction.
And now, Styled System is becoming a more-and-more widely-used solution for applying visual design constraints within component libraries and design systems.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;styled-system&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#styled-system&quot; class=&quot;css-1unrqcp&quot;&gt;Styled System&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Styled System is a solution for managing design constraint scales within certain domains of visual design.
By defining a typographic scale, negative space scale, color palettes, and other visual attributes in a &lt;em class=&quot;css-0&quot;&gt;theme object&lt;/em&gt;,
these values can be systematically applied to components where needed,
while still allowing the flexibility to override values contextually within an application.
Styled System provides an API to make doing the right thing easy when applying consistent styles throughout an application.
At its core, it&amp;#x27;s a suite of utilities to create functions for mapping design constraints to components,
and it helps you build a UI component library with a more consistent props API.
I like to think of it as &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;styling as a function of design constraints&lt;/strong&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Styled System is a fairly mature library at this point and much of the recent development has been focused on utilities that expand upon this core idea.
While Styled System is great for building design systems and component libraries, it&amp;#x27;s not an ideal solution in and of itself for creating white-labels or themeable user interfaces.
Styled System is completely framework-agnostic and requires the user to create their own components that integrate with other CSS-in-JS libraries.
It requires you to make intentional, upfront decisions about the overall component API,
which is great for corporate design systems, but shouldn&amp;#x27;t be neccessary for applying a design constraints in general-purpose UI development.
And, while it is possible, Styled System doesn&amp;#x27;t provide much guidance for creating applications that are truly &lt;em class=&quot;css-0&quot;&gt;themeable&lt;/em&gt;.&lt;/p&gt;&lt;h2 id=&quot;components-as-commodity&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#components-as-commodity&quot; class=&quot;css-1unrqcp&quot;&gt;Components as Commodity&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you look at modern web UI development, it&amp;#x27;s easy to see the large amount of duplicative efforts across different organizations.
While projects like Bootstrap and Material Design have seen a non-negligible amount of adoption,
I&amp;#x27;m very curious as to why we, as an industry, haven&amp;#x27;t wholesale adopted off-the-shelf solutions for UI components yet.
It can &lt;em class=&quot;css-0&quot;&gt;seem like&lt;/em&gt; it&amp;#x27;s only a matter of time before we see a major shift towards commodification of the work we do today,
but I&amp;#x27;m skeptical that that will ever happen.
Sometimes it feels like we, as web developers, are the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linotype_machine&quot; class=&quot;css-1o1roib&quot;&gt;Linotype operators&lt;/a&gt; of the 21st century.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;So why do we still spend time, energy, and money on building what is largely the same thing?
I think that Styled System and similar libraries are impacted by what is often called &lt;a href=&quot;https://en.wikipedia.org/wiki/IKEA_effect&quot; class=&quot;css-1o1roib&quot;&gt;The IKEA Effect&lt;/a&gt;.&lt;/p&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The IKEA effect is a cognitive bias in which consumers place a disproportionately high value on products they partially created.&lt;/p&gt;&lt;/blockquote&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;By providing primitive building blocks for creating a component library,
Styled System allows users to create custom components of their own.
I think this effect is sometimes compounded with &lt;a href=&quot;https://en.wikipedia.org/wiki/Not_invented_here&quot; class=&quot;css-1o1roib&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;Not-Invented-Here (NIH) Syndrome&lt;/em&gt;&lt;/a&gt;,
where organizations spend more time and energy on building an in-house solution when comparable off-the-shelf solutions exist.
It&amp;#x27;s fair to say that off-the-shelf UI component solutions do not and will never exist,
but if all you have is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_the_instrument#Abraham_Maslow&quot; class=&quot;css-1o1roib&quot;&gt;design system hammer&lt;/a&gt;, you start to see a lot of design-system-shaped nails.
I suspect it will take a bit of effort to move to a higher level of abstraction.&lt;/p&gt;&lt;h2 id=&quot;theming&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#theming&quot; class=&quot;css-1unrqcp&quot;&gt;Theming&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The idea of themeable user interfaces often flies in the face of what many corporate design systems attempt to achieve.
Most design systems are developed to ensure a consistent look and feel across hundreds of designers and developers spanning different teams in an organization,
and they often make assumptions about the flexibility of their outward APIs that can slow down design and development velocity,
in an effort to enforce this consistency.
Unless the product is intended for white-label applications,
organizations do not have good incentives to prioritize creating themeable interfaces.
It just doesn&amp;#x27;t make sense to spend resources on such efforts.
But, even when theming a user interface is not a hard requirement,
developing components with themeability in mind can be beneficial nonetheless.&lt;/p&gt;&lt;h2 id=&quot;themeable-components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#themeable-components&quot; class=&quot;css-1unrqcp&quot;&gt;Themeable Components&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;More and more design systems are built using third-party, open source components that handle complex logic, such as autocomplete inputs, masked inputs, date pickers, and drop downs.
Components like these are available today as off-the-shelf UI components,
and it&amp;#x27;s generally not worth the cost of developing new solutions when these components can be leveraged instead.
The &lt;em class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://reactjs.org/docs/render-props.html&quot; class=&quot;css-1o1roib&quot;&gt;render props&lt;/a&gt;&lt;/em&gt; pattern has become popular in recent years to allow this sort of logic to be packaged into reusable components
that aren&amp;#x27;t concerned with the styling of the UI.
If these sorts of components included default, styled versions that were completely themeable,
the consumers of these components wouldn&amp;#x27;t need to build the rendered UI pieces at all.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The problem with this idea is that every component has its own unique API,
and all theming APIs vary from implementation to implementation.
The only common denominator is the low-level CSS used for any web-based component,
and when the entirety of CSS is available for styling,
that still leaves a huge amount of room for interpretation.
Without a standard API for theming components,
we&amp;#x27;ll never have UI components that can truly operate as &lt;em class=&quot;css-0&quot;&gt;interchangeable parts&lt;/em&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If even a handful of UI component libraries conformed to a common specifiation for themeable components,
these components could be installed in many different applications without the need to add custom styles.
This is the idea behind the &lt;a href=&quot;https://system-ui.com/theme&quot; class=&quot;css-1o1roib&quot;&gt;Theme Specification&lt;/a&gt;,
which is intended to be an &lt;a href=&quot;/blog/interoperability&quot; class=&quot;css-1o1roib&quot;&gt;unopinionated foundation&lt;/a&gt; for other libraries to be built upon.
The success of this effort is contingent on adoption, but even with limited success,
this idea could have compounding effects on efficiencies within UI development.
&lt;strong class=&quot;css-1vg6q84&quot;&gt;The theme specification itself is a design constraint&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&quot;theme-ui&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#theme-ui&quot; class=&quot;css-1unrqcp&quot;&gt;Theme UI&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;a href=&quot;https://theme-ui.com&quot; class=&quot;css-1o1roib&quot;&gt;Theme UI&lt;/a&gt; is a library that builds upon some of the ideas within this post.
It&amp;#x27;s a framework for building themeable and interoperable UI components based on visual design constraints.
It provides out-of-the-box visual design consistency without the need to build an entire UI component library upfront.
Like Styled System, it uses a &lt;em class=&quot;css-0&quot;&gt;theme object&lt;/em&gt; for applying design constraints in an application,
but unlike Styled System it doesn&amp;#x27;t require custom UI components to apply these styles.
Both Theme UI and Styled System use the same underlying theme specification,
which means if you&amp;#x27;ve created components with Styled System, they should work in applications that are built with Theme UI.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The library is still fairly new, but it&amp;#x27;s intended to lay a foundation for other components, libraries, and tools to be built upon.
The more libraries that adopt this theme specification, the more the users of these libraries will benefit.
If you&amp;#x27;re looking for a better way to apply consistent visual styles,
build themeable components,
or leverage constraint-based design principles in your work,
I&amp;#x27;d encourage you to check it out.
And, if the ideas in this post interest you, we&amp;#x27;d love to have help building more on top of this foundation.
Check out the &lt;a href=&quot;https://github.com/system-ui/theme-ui&quot; class=&quot;css-1o1roib&quot;&gt;Theme UI repo&lt;/a&gt; to learn more.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Cascade is Not Inheritance]]></title><description><![CDATA[On more than one occasion, I've heard people conflate the  cascade  feature of CSS with  inheritance .
While it's an understandable thing to…]]></description><link>https://jxnblk.com/blog/the-cascade-is-not-inheritance/</link><guid isPermaLink="false">https://jxnblk.com/blog/the-cascade-is-not-inheritance/</guid><pubDate>Sat, 20 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;On more than one occasion, I&amp;#x27;ve heard people conflate the &lt;em class=&quot;css-0&quot;&gt;cascade&lt;/em&gt; feature of CSS with &lt;em class=&quot;css-0&quot;&gt;inheritance&lt;/em&gt;.
While it&amp;#x27;s an understandable thing to mix up because they are, in fact, related,
I think it&amp;#x27;s important to use the correct terms when talking about technology like this.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;inheritance&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#inheritance&quot; class=&quot;css-1unrqcp&quot;&gt;Inheritance&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;Inheritance&lt;/em&gt; is when a child element inherits styles from one of its parent elements.
Some (not all) CSS properties will automatically apply as a &lt;em class=&quot;css-0&quot;&gt;default value&lt;/em&gt; for child elements.
This allows you to set a font family and color at the top level of a page
and have all elements within that page use the same styles.
Very cool.&lt;/p&gt;&lt;h2 id=&quot;the-cascade&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#the-cascade&quot; class=&quot;css-1unrqcp&quot;&gt;The Cascade&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;em class=&quot;css-0&quot;&gt;Cascade&lt;/em&gt; is the set of rules that a browser uses to determine which particular styles should apply to a given element,
when there are conflicting rules.
This is, in my mind, the trickiest part of the CSS language and it trips people up all the time.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The algorithm specified in CSS takes the following into consideration when applying styles:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://www.w3.org/TR/css-cascade-3/#cascade-origin&quot; class=&quot;css-1o1roib&quot;&gt;Origin and Importance&lt;/a&gt;, which includes author, user agent, and user stylesheets&lt;ol class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Transition declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Important user agent declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Important user declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Important author declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Animation declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Normal author declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Normal user declarations&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Normal user agent declarations&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://www.w3.org/TR/css-cascade-3/#cascade-specificity&quot; class=&quot;css-1o1roib&quot;&gt;Specificity&lt;/a&gt;, which is &lt;a href=&quot;https://www.w3.org/TR/selectors/#specificity-rules&quot; class=&quot;css-1o1roib&quot;&gt;calculated based on selectors&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://www.w3.org/TR/css-cascade-3/#cascade-order&quot; class=&quot;css-1o1roib&quot;&gt;Order of Appearance&lt;/a&gt;, which means the last declared rule wins&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;This quote from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance&quot; class=&quot;css-1o1roib&quot;&gt;MDN&amp;#x27;s Introduction to CSS: Cascade and Inheritance&lt;/a&gt; sums it up pretty well:&lt;/p&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you didn&amp;#x27;t fully understand the cascade, specificity, and inheritance, then don&amp;#x27;t worry! This is definitely the most complicated thing we&amp;#x27;ve covered so far in the course, and is something that even professional web developers sometimes find tricky.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Why you should definitely learn how to use CSS-in-JS]]></title><description><![CDATA[From time to time, I've heard that CSS-in-JS poses a barrier to entry for some people.
Like any new software abstraction, CSS-in-JS is…]]></description><link>https://jxnblk.com/blog/why-you-should-learn-css-in-js/</link><guid isPermaLink="false">https://jxnblk.com/blog/why-you-should-learn-css-in-js/</guid><pubDate>Sat, 20 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;From time to time, I&amp;#x27;ve heard that CSS-in-JS poses a barrier to entry for some people.
Like any new software abstraction, CSS-in-JS is &lt;em class=&quot;css-0&quot;&gt;intended to&lt;/em&gt; abstract away some of the complexities from a lower level implementation, in this case CSS.
Abstractions are neither good nor bad, but they do require learning new things.
Using CSS-in-JS lets you style applications without needing to worry about a few of the thornier aspects of CSS,
but it doesn&amp;#x27;t replace CSS entirely,
and you still need to have a solid understanding of CSS to be successful.
You will absolutely need a solid understanding of
CSS properties, values and types, inheritance, layout, stacking context, and the box-model to be successful with CSS-in-JS.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;CSS-in-JS isn&amp;#x27;t a boogieman out to destroy everything you love about CSS.
In my opinion, it can make authoring CSS far more enjoyable than any other tool I&amp;#x27;ve used in the past,
and I&amp;#x27;d encourage you to give it a shot.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you already know JavaScript, CSS-in-JS helps remove the need to use native CSS syntax,
or deal with context switching between different languages.
For younger developers straight out of bootcamp,
this can make styling an application more accessible because there are fewer new things to learn.
I&amp;#x27;ve seen this myself, and remember one former colleague gushing about how Styled Components was so much easier to use than what they&amp;#x27;d learned in school.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you&amp;#x27;re less familiar with JS syntax, the effect can be the total opposite,
and it can seem like too much to learn at once.
Don&amp;#x27;t get discouraged.
You can still learn how to use CSS-in-JS, and keep in mind that whatever you learn along the way will be applicable knowledge in many other situations where JS is used.
I like to think of CSS-in-JS as a potentially low-barrier way to get started with JS.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Despite what I&amp;#x27;ve written here,
it can still feel like a barrier because &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;it &lt;em class=&quot;css-0&quot;&gt;does&lt;/em&gt; require learning something new&lt;/strong&gt;,
but one thing that I love about software development is that I&amp;#x27;m never bored and constantly learning.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you&amp;#x27;re not willing to learn something new, then you probably won&amp;#x27;t like CSS-in-JS at all,
but if you do have a curious mind, I hope this post helps.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;what-does-css-in-js-do&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#what-does-css-in-js-do&quot; class=&quot;css-1unrqcp&quot;&gt;What does CSS-in-JS do?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Most libraries are designed to:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Let you author CSS in JavaScript syntax&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Colocate styles with components&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Take advantage of native JS syntax features&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Take advantage of anything from the JS ecosystem&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-does-css-in-js-not-do&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-does-css-in-js-not-do&quot; class=&quot;css-1unrqcp&quot;&gt;What does CSS-in-JS &lt;em class=&quot;css-0&quot;&gt;not&lt;/em&gt; do?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;At the end of the day, you&amp;#x27;re still writing code that generates CSS, and the full power of the language is still available.
CSS-in-JS &lt;strong class=&quot;css-1vg6q84&quot;&gt;does not&lt;/strong&gt; get rid of the need to understand the following:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;How styles are applied to the DOM&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;How inheritance works&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;How CSS properties work&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;How CSS layout works&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-abstractions-does-css-in-js-provide&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-abstractions-does-css-in-js-provide&quot; class=&quot;css-1unrqcp&quot;&gt;What abstractions does CSS-in-JS provide?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;CSS-in-JS libraries allow you to author styles &lt;em class=&quot;css-0&quot;&gt;without&lt;/em&gt; generally having to think about:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;The cascade (&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;/blog/the-cascade-is-not-inheritance&quot; class=&quot;css-1o1roib&quot;&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;not inheritance&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Specificity&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Naming selectors&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Enforcing naming conventions&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Linting another language&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Enforcing file structures for another language&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Additional build tools&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-you-need-to-know&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-you-need-to-know&quot; class=&quot;css-1unrqcp&quot;&gt;What you need to know&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To be effective with CSS-in-JS, you&amp;#x27;ll need to have a good grasp of the following concepts:&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Types in JavaScript:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Strings&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Numbers&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Objects&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Arrays&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Boolean&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Null&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Undefined&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;MDN is a great resource for learning JS, and I&amp;#x27;d highly recommend their tutorial on
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&quot; class=&quot;css-1o1roib&quot;&gt;JavaScript data types and data structures&lt;/a&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To really excell with CSS-in-JS, you&amp;#x27;ll benefit from understanding the following:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators&quot; class=&quot;css-1o1roib&quot;&gt;Math operations&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators&quot; class=&quot;css-1o1roib&quot;&gt;Logical operators&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot; class=&quot;css-1o1roib&quot;&gt;Ternary operators&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors&quot; class=&quot;css-1o1roib&quot;&gt;Dot and bracket syntax&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules&quot; class=&quot;css-1o1roib&quot;&gt;ES Modules&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; class=&quot;css-1o1roib&quot;&gt;Object spread&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; class=&quot;css-1o1roib&quot;&gt;Destructuring&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-other-benefits-does-css-in-js-have&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-other-benefits-does-css-in-js-have&quot; class=&quot;css-1unrqcp&quot;&gt;What other benefits does CSS-in-JS have?&lt;/a&gt;&lt;/h2&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;It can make dead code elimination easier to manage&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;It will throw errors to help you avoid mistakes, including syntax, type, and undefined errors&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Many libraries offer support for theming&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;You can use virtually &lt;em class=&quot;css-0&quot;&gt;any&lt;/em&gt; package from npm&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;You can use ES modules and scope&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Most libraries offer ways to handle dynamic styling&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Styles are generally &amp;quot;scoped&amp;quot; to a specific component&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;It&amp;#x27;s far easier to write unit tests with CSS-in-JS&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Many libraries offer performance improvements like &lt;em class=&quot;css-0&quot;&gt;critical CSS&lt;/em&gt; with no additional setup needed&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;where-do-i-start&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#where-do-i-start&quot; class=&quot;css-1unrqcp&quot;&gt;Where do I start?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;There&amp;#x27;s certainly no one-size-fits-all answer here.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you haven&amp;#x27;t used React before, or have less experience with JS, I&amp;#x27;d recommend checking out the &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/&quot; class=&quot;css-1o1roib&quot;&gt;Gatsby tutorial&lt;/a&gt;.
Once you have a good grasp of the concepts laid out in the tutorial, see the guide on using &lt;a href=&quot;https://www.gatsbyjs.org/docs/css-in-js/&quot; class=&quot;css-1o1roib&quot;&gt;Using CSS-in-JS&lt;/a&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you know enough React to get going on your own, I&amp;#x27;d recommend  checking out &lt;a href=&quot;https://styled-components.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled Components&lt;/a&gt;.
Then, once you&amp;#x27;ve got that working, definitely check out &lt;a href=&quot;https://emotion.sh&quot; class=&quot;css-1o1roib&quot;&gt;Emotion&lt;/a&gt;.
These are the two most widely used CSS-in-JS libraries at the moment,
and between the two of them, they cover a lot of ground.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you have any questions or thoughts on how to make this post better, please reach out to me on &lt;a href=&quot;https://twitter.com/jxnblk&quot; class=&quot;css-1o1roib&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Modern Front-End Design System Stack]]></title><description><![CDATA[Design systems come in all shapes and sizes and can encompass a wide range of skillsets and roles within an organization.
As a front-end…]]></description><link>https://jxnblk.com/blog/the-modern-front-end-design-system/</link><guid isPermaLink="false">https://jxnblk.com/blog/the-modern-front-end-design-system/</guid><pubDate>Thu, 18 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Design systems come in all shapes and sizes and can encompass a wide range of skillsets and roles within an organization.
As a front-end developer, I&amp;#x27;d like to share some of the tooling
that I&amp;#x27;ve found to be helpful when building out the components and code portion of a design system
in modern applications.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;On more than one occasion, I&amp;#x27;ve been asked what a blessed &amp;quot;Jackson Stack&amp;quot; would look like.
This list is likely to change in the future,
but the following are tools that I think are both stable and beneficial to working in design systems in 2019.
This doesn&amp;#x27;t attempt to cover every aspect of a design system,
and there is always room for experimentation and exploration,
so please take this as more of a starting point rather than a definitive list of tools to use.
Full disclosure: I&amp;#x27;ve worked on or with many of the tools listed in this post, and this reflects my own &lt;em class=&quot;css-0&quot;&gt;personal opinions&lt;/em&gt;.
Don&amp;#x27;t sweat it if you&amp;#x27;re not using any of these, this is merely one perspective on the matter.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;what-do-you-mean-by-modern&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#what-do-you-mean-by-modern&quot; class=&quot;css-1unrqcp&quot;&gt;What do you mean by &lt;em class=&quot;css-0&quot;&gt;modern&lt;/em&gt;?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I use the term modern here to refer to React and related technologies.
This isn&amp;#x27;t meant to be an exclusive definition, and hopefully some of this tooling can serve as inspiration for tooling with other modern front-end libraries like Angular or Vue.js.
For the sake of pragmatism and my own personal experience,
the scope of this article will be focused on React.
If you&amp;#x27;re a full-stack Rails developer, a designer working in CSS, or someone who doesn&amp;#x27;t touch code at all,
&lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;hopefully you can steal some ideas and apply them to the tech stack that you use professionally.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#components&quot; class=&quot;css-1unrqcp&quot;&gt;Components&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://jxnblk.com/blog/components/&quot; class=&quot;css-1o1roib&quot;&gt;Everything is a component&lt;/a&gt;.
I&amp;#x27;ve found this mode of thinking in UI development to be extremely beneficial,
and modern front-end applications are built upon functional, component-based architectures.
While React itself offers almost zero guidance on how to manage styling,
userland libraries like &lt;a href=&quot;https://emotion.sh&quot; class=&quot;css-1o1roib&quot;&gt;Emotion&lt;/a&gt; and &lt;a href=&quot;https://styled-components.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled Components&lt;/a&gt; give you a way to author styles in a component-friendly way.&lt;/p&gt;&lt;h2 id=&quot;css-in-js&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#css-in-js&quot; class=&quot;css-1unrqcp&quot;&gt;CSS-in-JS&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While some might be skeptical of the sorts of abstractions introduced by CSS-in-JS libraries,
those who embrace it find it to be a liberating way to author styles.
Many (not all) of the problems that people typically encouter while working within a complex CSS codebase tend to go away when you adopt a JavaScript-based solution for managing styles.
Developers no longer have to fight specificity wars,
police pull requests for not conforming to a strict naming convention,
or constantly worry about the ever-increasing size of their stylesheets.
If there&amp;#x27;s only one thing from this list that you take away, I hope that it&amp;#x27;s this:&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;If you&amp;#x27;re building an application in React, use Emotion or Styled Components for styling.&lt;/strong&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Many others have written about these two libraries, but at a very high level they:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Allow you to author CSS in a component-centric way&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Allow you to add styles without needing to create (or choose names for) selectors&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Keep styles scoped and isolated to where they are intended to be used&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Allow you to publish components as packages, with no additional setup&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Work well with existing bundlers&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Can be used with standard code splitting tools&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Can be tested with the same libraries the rest of your application uses&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Have performance improvements (like critical CSS) built in, where developers don&amp;#x27;t really need to think about it&lt;/li&gt;&lt;/ul&gt;&lt;style data-emotion-css=&quot;1bbz37o&quot;&gt;.css-1bbz37o{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:20px;}&lt;/style&gt;&lt;h3 id=&quot;one-size-fits-all-fits-no-one-well&quot; class=&quot;css-1bbz37o&quot;&gt;&lt;a href=&quot;#one-size-fits-all-fits-no-one-well&quot; class=&quot;css-1unrqcp&quot;&gt;One size fits all fits no one well&lt;/a&gt;&lt;/h3&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Some people advocate creating &amp;quot;framework-agnostic&amp;quot; styles, dismissing CSS-in-JS to help legitimate this ideal.
While &lt;a href=&quot;https://en.wikipedia.org/wiki/Write_once,_run_anywhere&quot; class=&quot;css-1o1roib&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;write-once-use-everywhere&lt;/em&gt;&lt;/a&gt; is a nice concept in theory,
I do think that being pragmatic about building a design system can be a case of
&lt;a href=&quot;https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot; class=&quot;css-1o1roib&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;duplication being better than the wrong abstraction&lt;/em&gt;&lt;/a&gt;.
The quality of your code base, the development speed of your team, and the end-result of the UI
can suffer from following dogma.
Do what&amp;#x27;s best for your team, and don&amp;#x27;t knock CSS-in-JS until you try it with a team working on a real product.&lt;/p&gt;&lt;h2 id=&quot;styled-system&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#styled-system&quot; class=&quot;css-1unrqcp&quot;&gt;Styled System&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;As the author of &lt;a href=&quot;https://styled-system.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled System&lt;/a&gt;, I can&amp;#x27;t recommend it enough.
While Emotion and Styled Components give you a way to write, bundle, and use CSS, they mostly leave it up to you to decide &lt;em class=&quot;css-0&quot;&gt;how&lt;/em&gt; the styling should actually work.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Styled System is a fairly simple idea.
It transforms a theme object, built with scales and design constraints in mind, into component-based styles.
(The theme object is sort of a constraint-based schema for groups of related &lt;em class=&quot;css-0&quot;&gt;design tokens&lt;/em&gt; or raw style values, if you will.)
It&amp;#x27;s meant to make doing the right thing easy,
while also affording
developers just enough flexibility to maintain a high velocity.
With Styled System, your components have easy access to colors, font sizes, a space scale for margin and padding, and any other visual styles that you&amp;#x27;d like to keep consistent across your application.
Even if you&amp;#x27;ve never heard of Styled System, you&amp;#x27;ve likely seen its influence in other related libraries.&lt;/p&gt;&lt;h2 id=&quot;gatsby&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#gatsby&quot; class=&quot;css-1unrqcp&quot;&gt;Gatsby&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Once you have tools to build the components themselves,
you&amp;#x27;ll need a way to document them.
&lt;a href=&quot;https://gatsbyjs.org&quot; class=&quot;css-1o1roib&quot;&gt;Gatsby&lt;/a&gt; is an excellent tool for building applications in React, and it&amp;#x27;s an excellent choice for building documentation for component libraries.
It&amp;#x27;s even used to build the official &lt;a href=&quot;https://reactjs.org&quot; class=&quot;css-1o1roib&quot;&gt;React&lt;/a&gt; docs themselves.
Gatsby removes a lot of the complexity involved in setting up a React application.
And now with the official release &lt;a href=&quot;https://www.gatsbyjs.org/blog/2019-07-03-announcing-stable-release-gatsby-themes/&quot; class=&quot;css-1o1roib&quot;&gt;Gatsby themes&lt;/a&gt;, you can package up virtually any functionality you&amp;#x27;d like to reuse across multiple sites.
I suspect people working in the design systems space will
come up with some interesting applications for themes.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Another use case for Gatsby, that I haven&amp;#x27;t seen a lot of exploration of yet, is its potential as a prototyping tool.
If your production application has an API, or you want to integrate with existing data sources or services,
Gatsby has a growing ecosystem of plugins that make pulling data into your site really easy.
With the right setup, a developer could create blank templates for different parts of an application and allow designers to build prototypes with the components from the actual design system library,
while remaining
completely isolated from the production application.&lt;/p&gt;&lt;h2 id=&quot;mdx&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#mdx&quot; class=&quot;css-1unrqcp&quot;&gt;MDX&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Markdown is an excellent tool for developer documentation.
&lt;a href=&quot;https://mdxjs.com&quot; class=&quot;css-1o1roib&quot;&gt;MDX&lt;/a&gt; gives markdown super powers by allowing you to import and use React components inline with other markdown content.
You can also change what components are used to render different elements in markdown.
Many people use this feature to build live-editable code examples
with fenced code blocks.
With this level of flexibility,
MDX seems like an obvious choice for documenting design systems.
If you&amp;#x27;ve tried out MDX in the past, but it didn&amp;#x27;t &lt;em class=&quot;css-0&quot;&gt;click&lt;/em&gt;, I&amp;#x27;d highly recommend checking it out now that the stable v1 has been released.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Authoring documentation in MDX means that it should be portable enough to render in different React applications,
even if you&amp;#x27;re torn between using Gatsby and other options like &lt;a href=&quot;https://docz.site/&quot; class=&quot;css-1o1roib&quot;&gt;Docz&lt;/a&gt;, &lt;a href=&quot;https://storybook.js.org/&quot; class=&quot;css-1o1roib&quot;&gt;Storybook&lt;/a&gt; or &lt;a href=&quot;https://nextjs.org&quot; class=&quot;css-1o1roib&quot;&gt;Next.js&lt;/a&gt;.
Whatever you do, try to avoid locking yourself in to proprietary formats
or bending backwards for library-specific APIs when it comes to documentation.&lt;/p&gt;&lt;h2 id=&quot;react-live&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#react-live&quot; class=&quot;css-1unrqcp&quot;&gt;React Live&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;So how do you go about building live-editable code examples? &lt;a href=&quot;https://github.com/FormidableLabs/react-live&quot; class=&quot;css-1o1roib&quot;&gt;React Live&lt;/a&gt;.
It&amp;#x27;s an excellent library on its own, and when combined with MDX, it makes creating rich documentation for React components incredibly easy.
To learn how to set this up, see the official &lt;a href=&quot;https://mdxjs.com/guides/live-code&quot; class=&quot;css-1o1roib&quot;&gt;MDX guide&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;what-about-theme-ui&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-about-theme-ui&quot; class=&quot;css-1unrqcp&quot;&gt;What about Theme UI?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you follow my work, you may be asking how &lt;a href=&quot;https://theme-ui.com&quot; class=&quot;css-1o1roib&quot;&gt;Theme UI&lt;/a&gt; fits into the picture.
Theme UI is a much newer library, but it&amp;#x27;s built on top of the foundation of the libraries mentioned in this post.
At this point, I&amp;#x27;m unsure how a library like Theme UI would fit in to a &lt;em class=&quot;css-0&quot;&gt;corporate&lt;/em&gt; design system,
but I do think it would be an excellent choice for agencies who need to build more general-purpose solutions.
If you&amp;#x27;re willing to give it a shot, let me know how it goes.&lt;/p&gt;&lt;style data-emotion-css=&quot;18qluqq&quot;&gt;.css-18qluqq{margin-top:64px;margin-bottom:64px;border:0;border-bottom:1px solid;}&lt;/style&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Hopefully this little list is helpful in some small way,
and I hope you can take some ideas here for your own design systems work.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Shoutout to the people who work on the following design systems which helped serve as inspiration for this post:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://sproutsocial.com/seeds/&quot; class=&quot;css-1o1roib&quot;&gt;SproutSocial Seeds&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://primer.style/components&quot; class=&quot;css-1o1roib&quot;&gt;Primer Components&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://palette.artsy.net/&quot; class=&quot;css-1o1roib&quot;&gt;Artsy Palette&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Iterations on a Theme]]></title><description><![CDATA[As my personal GitHub account rolls over 500 repos (apparently a few of them are private), it felt like a good time to reflect on how I…]]></description><link>https://jxnblk.com/blog/iterations-on-a-theme/</link><guid isPermaLink="false">https://jxnblk.com/blog/iterations-on-a-theme/</guid><pubDate>Sat, 06 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;As my personal GitHub account rolls over 500 repos (apparently a few of them are private), it felt like a good time to reflect on how I approach using GitHub personally.
You might say, &lt;em class=&quot;css-0&quot;&gt;&amp;quot;500! Whoa, buddy, that&amp;#x27;s way too many repos!&amp;quot;&lt;/em&gt; Believe me, it is.
There are other people who do a much better job at staying organized than I do.
But most of my repos aren&amp;#x27;t fully-baked open source projects.
I see a lot of them as small experiments, my attempt to &lt;em class=&quot;css-0&quot;&gt;&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5&quot; class=&quot;css-1o1roib&quot;&gt;learn in public&lt;/a&gt;&lt;/em&gt;, or, for many of them, &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;iterations on a theme&lt;/strong&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;It might look like I&amp;#x27;m cranking out new things left and right sometimes,
but often I get the itch to rework an old idea,
as a complete rewrite, with no baggage attached.
There&amp;#x27;s certainly something to be said about starting with a blank slate.
I need to do a better job of managing expectations,
since a lot of these aren&amp;#x27;t intended to be hard dependencies in an application,
but serve as good starting points for forking or suggestions for features in upstream libraries.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For example, &lt;a href=&quot;https://rebassjs.org&quot; class=&quot;css-1o1roib&quot;&gt;Rebass&lt;/a&gt; (didn&amp;#x27;t invent but) included a &lt;a href=&quot;https://github.com/jxnblk/axs/commit/b54d8527e6e19ec1177cb8894af9870a84a16962&quot; class=&quot;css-1o1roib&quot;&gt;&lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;css&lt;/code&gt; prop&lt;/a&gt; until &lt;a href=&quot;https://styled-components.com&quot; class=&quot;css-1o1roib&quot;&gt;styled-components&lt;/a&gt; included one as well &lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
It also had an &lt;a href=&quot;https://github.com/rebassjs/rebass/commit/3201fd119313214c0a16b167b81e4ae9a71c2e98&quot; class=&quot;css-1o1roib&quot;&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;is&lt;/code&gt; prop&lt;/a&gt;, until it was adopted and renamed &lt;code class=&quot;css-12ivgcj&quot;&gt;as&lt;/code&gt;.
The idea with these features was never to own these concepts forever,
but to serve as a testing bed in userland and prove out APIs that might make sense in upstream libraries,
many of which weren&amp;#x27;t mature enough for a formal PR.
Some repos and ideas fall on the other side of the fence, not being all that great, and I think were better left as experiments.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In looking back on some of these repos, I started thinking about how they&amp;#x27;ve evolved over time and noticed a few overarching themes.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;static-site-generators--zero-config&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#static-site-generators--zero-config&quot; class=&quot;css-1unrqcp&quot;&gt;Static Site Generators &amp;amp; Zero-Config&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Ever since learning about &lt;a href=&quot;https://github.com/jekyll/jekyll&quot; class=&quot;css-1o1roib&quot;&gt;Jekyll&lt;/a&gt; years ago,
I&amp;#x27;ve been fascinated with the idea of generating simple static sites with modern tooling.
What started as a &lt;a href=&quot;https://jxnblk.com/blog/static-site-generation-with-react-and-webpack&quot; class=&quot;css-1o1roib&quot;&gt;blog post&lt;/a&gt; about static site generation in 2015, became a &lt;a href=&quot;https://jxnblk.com/blog/zero-configuration-react-static-site-generator/&quot; class=&quot;css-1o1roib&quot;&gt;zero-config CLI&lt;/a&gt; in 2016 (appropriately named &lt;a href=&quot;https://github.com/jxnblk/static-react&quot; class=&quot;css-1o1roib&quot;&gt;static-react&lt;/a&gt;).
I took the same zero-config philosophy and applied it to webpack with a CLI named &lt;a href=&quot;https://github.com/jxnblk/hotdamn&quot; class=&quot;css-1o1roib&quot;&gt;hotdamn&lt;/a&gt; (it even supported markdown for content).
I was also really interested in the idea of how to make React more accessible to people who weren&amp;#x27;t JavaScript developers and made &lt;a href=&quot;https://github.com/jxnblk/ejsx&quot; class=&quot;css-1o1roib&quot;&gt;Ejsx&lt;/a&gt;.
In 2017, working with a few others, some of these ideas became &lt;a href=&quot;https://github.com/c8r/x0&quot; class=&quot;css-1o1roib&quot;&gt;x0&lt;/a&gt; and a little later &lt;a href=&quot;https://github.com/jxnblk/mdx-go&quot; class=&quot;css-1o1roib&quot;&gt;mdx-go&lt;/a&gt;.
I&amp;#x27;ll also admit that I have several private repos that generate static HTML through some means or another.
I might be a little obsessed with this idea.&lt;/p&gt;&lt;h2 id=&quot;avoiding-learning-tools&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#avoiding-learning-tools&quot; class=&quot;css-1unrqcp&quot;&gt;Avoiding Learning Tools&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Another related theme I&amp;#x27;ve pick up on, is my reluctance to use existing tools for the job at hand.
Instead of firing up Adobe Illustrator to create yet another Twitter card image or favicon,
I made &lt;a href=&quot;https://github.com/jxnblk/repng&quot; class=&quot;css-1o1roib&quot;&gt;Repng&lt;/a&gt; so that I could create images with React components.
I put together &lt;a href=&quot;https://github.com/c8r/pixo&quot; class=&quot;css-1o1roib&quot;&gt;Pixo&lt;/a&gt; so that I could avoid manually converting SVG icons into React&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.
Even &lt;a href=&quot;https://colorable.jxnblk.com&quot; class=&quot;css-1o1roib&quot;&gt;Colorable&lt;/a&gt;, &lt;a href=&quot;https://palx.jxnblk.com&quot; class=&quot;css-1o1roib&quot;&gt;Palx&lt;/a&gt;, and &lt;a href=&quot;https://monochrome.jxnblk.com&quot; class=&quot;css-1o1roib&quot;&gt;Monochrome&lt;/a&gt; are partly motivated by not wanting to fire up a graphics application.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A couple years ago, I put together a last-minute &lt;a href=&quot;https://github.com/jxnblk/react-design-tooling&quot; class=&quot;css-1o1roib&quot;&gt;presentation for a meetup&lt;/a&gt;, and like any good JavaScript developer,
instead of reaching for Google Slides, I rolled my own React app.
The next time someone twisted my arm to speak in front of other people,
I abstracted that out into a component library called &lt;a href=&quot;https://github.com/jxnblk/redeck&quot; class=&quot;css-1o1roib&quot;&gt;Redeck&lt;/a&gt;.
A little later, after &lt;a href=&quot;https://github.com/johno&quot; class=&quot;css-1o1roib&quot;&gt;John Otander&lt;/a&gt; et al. had released &lt;a href=&quot;https://mdxjs.com&quot; class=&quot;css-1o1roib&quot;&gt;MDX&lt;/a&gt;, I took that slideshow presentation library and turned it into &lt;a href=&quot;https://github.com/jxnblk/mdx-deck&quot; class=&quot;css-1o1roib&quot;&gt;MDX Deck&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;styling--cheap-ui&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#styling--cheap-ui&quot; class=&quot;css-1unrqcp&quot;&gt;Styling &amp;amp; Cheap UI&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A fair chunk of my professional work has been around creating UI.
If you do that long enough, you realize there&amp;#x27;s a &lt;em class=&quot;css-0&quot;&gt;ton&lt;/em&gt; of ways to lower the amount of effort that requires.
I use the term &lt;strong class=&quot;css-1vg6q84&quot;&gt;Cheap UI&lt;/strong&gt; when I talk about this sort of thing,
because I think ultimately the cost of what we do today will continue to approach zero in the future.
In the world of A/B experimentation and constant iteration, making UI cheaper to produce, only makes sense&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a href=&quot;#fn-3&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In 2013, I released &lt;a href=&quot;http://basscss.com&quot; class=&quot;css-1o1roib&quot;&gt;Basscss&lt;/a&gt;, which was largely based on principles from &lt;a href=&quot;https://mobile.twitter.com/stubbornella/&quot; class=&quot;css-1o1roib&quot;&gt;Nicole Sullivan&amp;#x27;s&lt;/a&gt; &lt;a href=&quot;https://github.com/stubbornella/oocss/wiki&quot; class=&quot;css-1o1roib&quot;&gt;OOCSS&lt;/a&gt;,
&lt;a href=&quot;https://github.com/necolas&quot; class=&quot;css-1o1roib&quot;&gt;Nicolas Gallagher&amp;#x27;s&lt;/a&gt; &lt;a href=&quot;https://github.com/suitcss/suit&quot; class=&quot;css-1o1roib&quot;&gt;Suit CSS&lt;/a&gt;, and a lot of discussions with &lt;a href=&quot;https://github.com/mrmrs&quot; class=&quot;css-1o1roib&quot;&gt;Adam Morse&lt;/a&gt;.
It was my attempt to make building UI as quick and cheap as possible.
That worked well for the time, and served as inspiration for other libraries, like Buzzfeed&amp;#x27;s &lt;a href=&quot;https://solid.buzzfeed.com/&quot; class=&quot;css-1o1roib&quot;&gt;Solid&lt;/a&gt;.
As soon as I&amp;#x27;d taken the time to learn React, I could tell it was the next big thing,
and I immediately tried to apply some of this same thinking in &lt;a href=&quot;https://rebassjs.org&quot; class=&quot;css-1o1roib&quot;&gt;Rebass&lt;/a&gt; and &lt;a href=&quot;https://github.com/jxnblk/reflexbox&quot; class=&quot;css-1o1roib&quot;&gt;Reflexbox&lt;/a&gt;.
Rebass continued to evolve, eventually swapping out CSS for inline styles,
which made sharing components via npm even simpler.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;As I continued working on Rebass, I tried out some of the cutting edge CSS-in-JS libraries of the time &lt;a href=&quot;https://github.com/Khan/aphrodite&quot; class=&quot;css-1o1roib&quot;&gt;Aphrodite&lt;/a&gt; and &lt;a href=&quot;https://github.com/FormidableLabs/radium&quot; class=&quot;css-1o1roib&quot;&gt;Radium&lt;/a&gt;.
For reasons I can&amp;#x27;t quite remember, neither one seemed to fit quite what I wanted.
So I started hacking on &lt;a href=&quot;https://github.com/cxs-css/cxs&quot; class=&quot;css-1o1roib&quot;&gt;CXS&lt;/a&gt; to try to find a simple, lightweight API for styling React components.
A &lt;em class=&quot;css-0&quot;&gt;ton&lt;/em&gt; of other similar libraries sprung up around the same time, including &lt;a href=&quot;https://github.com/threepointone/glamor&quot; class=&quot;css-1o1roib&quot;&gt;Glamor&lt;/a&gt;,
which looked considerably better than anything I would&amp;#x27;ve done.
Realizing that it&amp;#x27;d only be a matter of time until my ideal CSS-in-JS solution existed,
I continued to iterate on the higher-level component APIs that I wanted to have for building UI.
Since Rebass had matured a bit, I didn&amp;#x27;t want to rock the boat too much for people who were using the library,
and I started another blank-slate project called &lt;a href=&quot;https://github.com/jxnblk/axs&quot; class=&quot;css-1o1roib&quot;&gt;Axs&lt;/a&gt;.
Axs is probably one of my least popular libraries, but it&amp;#x27;s really where the inception of &lt;a href=&quot;https://styled-system.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled System&lt;/a&gt; happened.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The first version of Axs had a props API that looked a lot like Basscss.
After writing responsive styles with props like &lt;code class=&quot;css-12ivgcj&quot;&gt;w={1} sw={1/2} mw={1/3} lw={1/4}&lt;/code&gt; for a while
(that&amp;#x27;s shorthand for &lt;code class=&quot;css-12ivgcj&quot;&gt;width&lt;/code&gt;, &lt;code class=&quot;css-12ivgcj&quot;&gt;small-width&lt;/code&gt;, &lt;code class=&quot;css-12ivgcj&quot;&gt;medium-width&lt;/code&gt;, &lt;code class=&quot;css-12ivgcj&quot;&gt;large-width&lt;/code&gt;),
I realized they could be combined into a single prop as an array, making it &lt;code class=&quot;css-12ivgcj&quot;&gt;width={[ 1, 1/2, 1/3, 1/4 ]}&lt;/code&gt;.
This is JavaScript, after all.
I loved this API, but wasn&amp;#x27;t sure if I&amp;#x27;d gone too far down a rabbithole.
I convinced some coworkers to try this approach out on some smaller projects (not the best thing to do, professionally),
and surprisingly, they seemed to like the API as well.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A little later, &lt;a href=&quot;https://styled-components.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled Components&lt;/a&gt; was released,
and I immediately realized it was what I wanted to use to build Rebass.
After a little more tinkering and experimentation, I released &lt;a href=&quot;https://styled-system.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled System&lt;/a&gt;,
taking the props API from Axs and making it available for anyone to build their own version of Rebass.&lt;/p&gt;&lt;h2 id=&quot;iteration&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#iteration&quot; class=&quot;css-1unrqcp&quot;&gt;Iteration&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I like reflecting on these experiments because I think it goes to show how some ideas take time to form.
As they say, &lt;em class=&quot;css-0&quot;&gt;if at first you don&amp;#x27;t succeed, try, try again&lt;/em&gt;.
I may be a little too quick to throw the baby out with the bathwater sometimes,
but I don&amp;#x27;t think some of the libraries that I&amp;#x27;m most proud of would have ever existed if I hadn&amp;#x27;t continually
pushed myself to try things in new ways and get out of my comfort zone a little bit.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Hopefully, this encourages you to try new things and not worry too much if your new repo doesn&amp;#x27;t make it to the front page of Hacker News.
I know I&amp;#x27;d love to see more experimentation and more ideas out there in this weird space we call open source.&lt;/p&gt;&lt;div class=&quot;footnotes css-0&quot;&gt;&lt;style data-emotion-css=&quot;18qluqq&quot;&gt;.css-18qluqq{margin-top:64px;margin-bottom:64px;border:0;border-bottom:1px solid;}&lt;/style&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;ol class=&quot;css-0&quot;&gt;&lt;li id=&quot;fn-1&quot; class=&quot;css-0&quot;&gt;I think the &lt;code class=&quot;css-12ivgcj&quot;&gt;css&lt;/code&gt; prop originated in &lt;a href=&quot;https://github.com/threepointone/glamor&quot; class=&quot;css-1o1roib&quot;&gt;Glamor&lt;/a&gt;, but I could be wrong.&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;fn-2&quot; class=&quot;css-0&quot;&gt;There are better tools for SVGs now, see &lt;a href=&quot;https://github.com/smooth-code/svgr&quot; class=&quot;css-1o1roib&quot;&gt;SVGR&lt;/a&gt;.&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;fn-3&quot; class=&quot;css-0&quot;&gt;I&amp;#x27;m not talking about robots replacing designers here. The idea here is that the level at which people think about UI and design products becomes a lot higher than what we do today. Software has a tendency to trend towards higher-level abstractions. I don&amp;#x27;t plan on learning assembly language any time soon, and the things we do today will be viewed in a similar way in the future.&lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Interoperability]]></title><description><![CDATA[Back in early 2013, I was working at a small startup in San Francisco called Stitch Fix, alongside Adam Morse and a handful of others.
We…]]></description><link>https://jxnblk.com/blog/interoperability/</link><guid isPermaLink="false">https://jxnblk.com/blog/interoperability/</guid><pubDate>Thu, 21 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Back in early 2013, I was working at a small startup in San Francisco called Stitch Fix, alongside Adam Morse and a handful of others.
We were designing and building out early versions of their marketing pages and some internal tools.
I had the word designer in my title, and until that point in my career, I&amp;#x27;d not shipped much production code for work.
I learned Flash in college and taught myself HTML and CSS on the side over the years, using it for small side projects and design prototypes for user research, but had never used Git and knew next-to-nothing about JavaScript.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;We were both enamored by the work that people like Nicole Sullivan and Nicolas Gallagher were doing with Object-Oriented CSS and stealing lots of ideas for what we were working on.
After we left the company, I decided to move back to the east coast and work for Kickstarter.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In late 2013, I&amp;#x27;d taken some of the ideas Adam and I were talking about at the time, and some of the problems we were working on at Kickstarter (involving a 1MB+ CSS bundle), and released the first version of Basscss.
Around the same time, Adam released Tachyons.
We both continued to develop each project separately and never landed on a common API for the two libraries.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;naming-things-is-hard&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#naming-things-is-hard&quot; class=&quot;css-1unrqcp&quot;&gt;Naming things is hard&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In hindsight, I wish I&amp;#x27;d pushed forward with Tachyons naming conventions, but at the time, I don&amp;#x27;t think my team would have gone for it.
I had changed &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;btn&lt;/code&gt; to &lt;code class=&quot;css-12ivgcj&quot;&gt;button&lt;/code&gt; because the designers &amp;amp; developers I worked with prefered &amp;quot;human readable&amp;quot; naming conventions.
There&amp;#x27;s nothing objectively more or less &amp;quot;human readable&amp;quot; between &lt;code class=&quot;css-12ivgcj&quot;&gt;btn&lt;/code&gt; or &lt;code class=&quot;css-12ivgcj&quot;&gt;button&lt;/code&gt;, but I do understand the concern and think it&amp;#x27;s valuable to side with the team your working with in situations like this.
But there&amp;#x27;s no reason Basscss, as an open source library, had to adhere to the same conventions.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The real tragedy here in the divergent naming conventions is that if you&amp;#x27;ve started building an application with Basscss,
but then want to upgrade to something more fully-featured like Tachyons, you&amp;#x27;ll have to do a lot of manual work to migrate.
Essentially, HTML templates written with either of these libraries isn&amp;#x27;t as portable as if we&amp;#x27;d used a standard syntax, for example inline styles.
Today&amp;#x27;s tools would make this a lot easier, using type checking, unit tests, and perhaps even AST parsing, but it would still create a barrier.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;interopability&lt;/strong&gt; between these two libraries suffered because
&lt;em class=&quot;css-0&quot;&gt;what&lt;/em&gt; they did, was different from &lt;em class=&quot;css-0&quot;&gt;how&lt;/em&gt; they did it.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Around the same time, Etsy adopted a similar approach with slightly different naming conventions, and as the years passed,
so did BuzzFeed Solid, GitHub Primer, and Bootstrap – and now there are other open source libraries doing the same thing with, again, new naming conventions.
I don&amp;#x27;t mean to call these projects out in a bad way – I think they took (what I think was) a good idea and made it work for their team.&lt;/p&gt;&lt;h2 id=&quot;learning-from-the-past&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#learning-from-the-past&quot; class=&quot;css-1unrqcp&quot;&gt;Learning from the past&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The paradigm of atomic/functional/utility CSS has passed.
I don&amp;#x27;t think there are any problems left to solve in this space, and, in my opinion, Tachyons has done the best job at it.
It&amp;#x27;s still a valid approach to styling an application,
but if you&amp;#x27;re using a modern front-end stack with React,
I wouldn&amp;#x27;t recommend using a CSS library like these to build out an application.
Libraries like &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://styled-components.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled Components&lt;/a&gt; and &lt;a href=&quot;https://emotion.sh&quot; class=&quot;css-1o1roib&quot;&gt;Emotion&lt;/a&gt; are tools much better suited to the job and will save you a lot of headache in the long run.&lt;/p&gt;&lt;h2 id=&quot;lets-not-do-this-again&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#lets-not-do-this-again&quot; class=&quot;css-1unrqcp&quot;&gt;Let&amp;#x27;s not do this again&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Why am I talking about approaches to CSS from five years ago?
Call me naive, but I like to think that humans are capable of learning from their past mistakes.
A lot of modern front-end libraries are starting to settle on more standard, more interoperable APIs that help reduce lock-in.
Take React and Preact, or Styled Components and Emotion.
These libraries share virtually the same API, which means teams can easily migrate from one to another in the span of an afternoon.
This is great thing, and it allows developers to start thinking at a higher level of abstraction.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Styled System is one small attempt at a higher level of abstraction on top of the current CSS-in-JS libraries.
It&amp;#x27;s completely decoupled from Styled Components, Emotion, and even React itself.
For the most part, Styled System uses CSS property names as React component props,
which is something that other libraries do as well and doesn&amp;#x27;t require much additional learning if you already know &lt;em class=&quot;css-0&quot;&gt;some&lt;/em&gt; CSS.
I think this is great.
Some libraries have even re-implemented the core of Styled System for various reasons,
which I think is fine and helps encourage exploration.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Where I see differences start to arise is at the theme definition level.
Even outside of React context-based theming, a lot of React applications will store global style constants in a common module.
Something I&amp;#x27;m starting to notice is that there are no standard conventions for what that module contains or how its structured,
but all of them seem to be doing the same thing, in a slightly different way.&lt;/p&gt;&lt;h2 id=&quot;design-system-tokens&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#design-system-tokens&quot; class=&quot;css-1unrqcp&quot;&gt;Design System Tokens&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I suspect a lot of the tooling for styling applications would benefit from having a standard theming format for storing these values.
Jina Anne pioneered the concept of &lt;em class=&quot;css-0&quot;&gt;design system tokens&lt;/em&gt; &lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; years ago,
and a lot of teams have successfully adopted approaches like this, which I think is fantastic.
If you&amp;#x27;re already familiar with the idea of &lt;em class=&quot;css-0&quot;&gt;design system tokens&lt;/em&gt;, you&amp;#x27;re one step closer to seeing the value in a standard theming format.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Design system tokens are meant to be flexible and work cross-platform, which means different teams,
different implementations, and different libraries will name things differently.
This is where this specification would fit in.
A lot of interoperability could be realized,
if we all, for example, named our color palette &lt;code class=&quot;css-12ivgcj&quot;&gt;colors&lt;/code&gt; and named the font sizes we use &lt;code class=&quot;css-12ivgcj&quot;&gt;fontSizes&lt;/code&gt;.
What you do beyond that and what data format you use to store these values, is up to you.
It&amp;#x27;s trivial to convert JSON to ES modules to YAML or even TOML, if that&amp;#x27;s your thing.
It&amp;#x27;s also just a data structure, so transforming between other data structures (e.g. design tools or a GraphQL API) should also be possible.
This standard also wouldn&amp;#x27;t try to solve the extremely complex problems of how to name the colors themselves.&lt;/p&gt;&lt;h2 id=&quot;a-theme-specification&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#a-theme-specification&quot; class=&quot;css-1unrqcp&quot;&gt;A Theme Specification&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If I haven&amp;#x27;t lost you by now, and if this interests you,
I&amp;#x27;ve started a rough idea of what this could look like here: &lt;a href=&quot;https://styled-system.com/theme-specification&quot; class=&quot;css-1o1roib&quot;&gt;Theme Specification&lt;/a&gt;.
Imagine if the entire ecosystem of open source React UI components adhered to a common naming convention for theming,
while still allowing you to choose the CSS-in-JS library of your choice.
Any new UI component you add to your application,
could instantly pick up the values from your theme and mimic the look and feel of the rest of your application,
without needing to write any custom CSS.
I think that could be pretty cool.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Ultimately this specification should be completely decoupled from the Styled System library,
and I can move this to a more neutral location in the near future,
but this seemed like a logical place to start this discussion.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Let me know what you think on &lt;a href=&quot;https://mobile.twitter.com/jxnblk/status/1107726037805424641&quot; class=&quot;css-1o1roib&quot;&gt;Twitter&lt;/a&gt;
or by &lt;a href=&quot;https://github.com/styled-system/styled-system/issues&quot; class=&quot;css-1o1roib&quot;&gt;opening an issue&lt;/a&gt;.&lt;/p&gt;&lt;div class=&quot;footnotes css-0&quot;&gt;&lt;style data-emotion-css=&quot;18qluqq&quot;&gt;.css-18qluqq{margin-top:64px;margin-bottom:64px;border:0;border-bottom:1px solid;}&lt;/style&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;ol class=&quot;css-0&quot;&gt;&lt;li id=&quot;fn-1&quot; class=&quot;css-0&quot;&gt;Design system tokens are a fantastic abstraction. They try to solve the problem of sharing a brand&amp;#x27;s core style values cross-platform,
whereas this specification is (initially) primarily focused on CSS/JS development – i.e. a potential &lt;em class=&quot;css-0&quot;&gt;output&lt;/em&gt; from design tokens.
Design system tokens and this theme specification should be completely compatible with each other and decoupled from one another.&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[The Three Tenets of Styled System]]></title><description><![CDATA[I released  Styled System  around a year and a half ago,
and since then, the library has been growing steadily
and has even resulted in a…]]></description><link>https://jxnblk.com/blog/the-three-tenets-of-styled-system/</link><guid isPermaLink="false">https://jxnblk.com/blog/the-three-tenets-of-styled-system/</guid><pubDate>Sun, 17 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I released &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://styled-system.com&quot; class=&quot;css-1o1roib&quot;&gt;Styled System&lt;/a&gt; around a year and a half ago,
and since then, the library has been growing steadily
and has even resulted in a few copycat libraries that use some of the same conventions.
Up until now, I haven&amp;#x27;t really written much about the thinking behind the library, but have relied more on my approach of &lt;em class=&quot;css-0&quot;&gt;show, don&amp;#x27;t tell&lt;/em&gt;&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
And while this library is certainly an iteration on a theme&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
(those who have followed me for years may have a clear idea what it is meant for),
I&amp;#x27;d like to expand on what I think makes Styled System a great fit for some teams.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;three-tenets&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#three-tenets&quot; class=&quot;css-1unrqcp&quot;&gt;Three Tenets&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;At its core, Style System is really intended to enable developers to achieve these three things:&lt;/p&gt;&lt;ol class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Style consistently with a global theme&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Respond to changing requirements quickly&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Create mobile-first responsive layouts with ease&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;It&amp;#x27;s not meant to solve every styling problem out there,
but it is focused on some of the issues I&amp;#x27;ve noticed over the years for diverse teams working on codebases where developers and designers may have varying levels of expertise with CSS and other technologies.
I have a huge amount of respect for developers who focus on CSS and who strive to understand the intricacies of an ever-growing specification, but in my experience, it&amp;#x27;s far more likely that developers are focused on other parts of the Web stack and generally know just enough CSS to be dangerous.
I don&amp;#x27;t think that means that CSS should be completely abstracted away,
but I do think there is opportunity for creating powerful abstractions that &lt;em class=&quot;css-0&quot;&gt;make it easy to do the right thing&lt;/em&gt;&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a href=&quot;#fn-3&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Styled System is meant to be just one such abstraction.&lt;/p&gt;&lt;h2 id=&quot;consistency&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#consistency&quot; class=&quot;css-1unrqcp&quot;&gt;Consistency&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Consistency is the bedrock of any constraint-based design or design system effort.
It goes hand-in-hand with software development principles like &lt;em class=&quot;css-0&quot;&gt;Don&amp;#x27;t Repeat Yourself&lt;/em&gt; (DRY)
and the general idea of abstraction.
With modern tooling like CSS-in-JS it&amp;#x27;s never been easier to ensure that values are type safe and that styles are consistent to a certain degree.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Styled System takes advantage of some of these capabilities and attempts to help teams bake this consistency in by default.
A hard-coded font size or color value in a code review is easy to smell,
and developers naturally opt-in to keeping values stored in a globally shared theme object.&lt;/p&gt;&lt;h2 id=&quot;responding-to-change&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#responding-to-change&quot; class=&quot;css-1unrqcp&quot;&gt;Responding to Change&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Consistency is great, but I&amp;#x27;ve never seen a product freeze feature development to devote effort into keeping things looking consistent.
Developers are frequently working in short sprint cycles to finish tasks that likely didn&amp;#x27;t account for styling consistency when they were estimated.
Over time this leads to technical debt and parts of the CSS code base quickly become obsolete pieces of legacy code.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Styled System tries to balance the consistency provided by the core theme object with the reality that developers will constantly need to make one-off changes to ship features.
By putting &lt;em class=&quot;css-0&quot;&gt;some&lt;/em&gt; of the styling control into a component&amp;#x27;s props,
developers can keep these one-off changes isolated to the parts of the code base where they are used.
If a message component &lt;em class=&quot;css-0&quot;&gt;really&lt;/em&gt; needs to have a 13px font size, you can put that magic number directly in the component that needs it, and when that component is deleted, the magic number is gone as well.&lt;/p&gt;&lt;h2 id=&quot;mobile-first&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#mobile-first&quot; class=&quot;css-1unrqcp&quot;&gt;Mobile-First&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While Responsive Web Design&lt;sup id=&quot;fnref-4&quot;&gt;&lt;a href=&quot;#fn-4&quot; class=&quot;footnote-ref css-1o1roib&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; is nearly a decade old, and we&amp;#x27;ve been designing for mobile devices for some time now, there still aren&amp;#x27;t clear best practices for how developers should approach these design concepts.
Styled System includes an opinionated syntax for how to style things responsively that&amp;#x27;s meant to
help shape the way people think about designing for mobile devices.
Instead of burying conditionals for a single CSS property across multiple media query blocks,
Styled System uses an &lt;a href=&quot;https://styled-system.com/responsive-styles&quot; class=&quot;css-1o1roib&quot;&gt;array syntax&lt;/a&gt; to force developers into thinking how a singular dimension, such as font size or width, should change from one breakpoint to the next.
This syntax is probably the most contentious part of Styled System, and I&amp;#x27;ve been pleasantly surprised at how quickly I&amp;#x27;ve seen people pick this up and how popular it&amp;#x27;s become.&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-css css-h2uv5g&quot;&gt;/* example in CSS */
.thing {
  font-size: 16px;
  width: 100%;
}
@media screen and (min-width: 40em) {
  font-size: 20px;
  width: 50%;
}
@media screen and (min-width: 52em) {
  font-size: 24px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// example with Styled System
&amp;lt;Thing
  fontSize={[ 16, 20, 24 ]}
  width={[1, 1/2]}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A year and a half later,
Styled System has turned out to be far more well received than I ever would have expected,
and I&amp;#x27;ve learned a tremendous amount from seeing how other people have taken the core concepts within it in different directions.
It may not be a good fit for every team out there, but I hope to see more explorations
into how we can build more powerful abstractions on top of CSS to keep pushing the Web platform forward.&lt;/p&gt;&lt;style data-emotion-css=&quot;18qluqq&quot;&gt;.css-18qluqq{margin-top:64px;margin-bottom:64px;border:0;border-bottom:1px solid;}&lt;/style&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A lot of the ideas within Styled System come from the people I&amp;#x27;ve learned from over the years.
Thanks to:
Nicole Sullivan, Nicolas Gallagher, Jonathan Snook, Adam Morse, John Otander, Diana Mounter,
Jon Gold, Anh-Thư Huỳnh, Alex Mykyta, John Polacek,
and all the &lt;a href=&quot;https://github.com/styled-system/styled-system/graphs/contributors&quot; class=&quot;css-1o1roib&quot;&gt;Styled System contributors&lt;/a&gt; and users.&lt;/p&gt;&lt;div class=&quot;footnotes css-0&quot;&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;ol class=&quot;css-0&quot;&gt;&lt;li id=&quot;fn-1&quot; class=&quot;css-0&quot;&gt;I find some things difficult to put into words, especially when it&amp;#x27;s a newer idea, and think that, just like a picture is worth a thousand words, showing code can be a much more powerful way to express an idea in some cases.
See also: &lt;a href=&quot;https://en.wikipedia.org/wiki/Show,_don%27t_tell&quot; class=&quot;css-1o1roib&quot;&gt;Show, don&amp;#x27;t tell&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;fn-2&quot; class=&quot;css-0&quot;&gt;I plan to expand on this in another post - see also &lt;a href=&quot;https://github.com/basscss/basscss/&quot; class=&quot;css-1o1roib&quot;&gt;Basscss&lt;/a&gt;, &lt;a href=&quot;https://github.com/jxnblk/reflexbox&quot; class=&quot;css-1o1roib&quot;&gt;Reflexbox&lt;/a&gt;, &lt;a href=&quot;https://rebassjs.org&quot; class=&quot;css-1o1roib&quot;&gt;Rebass&lt;/a&gt;, &lt;a href=&quot;https://github.com/jxnblk/axs/tree/v1.0.0&quot; class=&quot;css-1o1roib&quot;&gt;Axs&lt;/a&gt;&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;fn-3&quot; class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/brada/2003/10/02/the-pit-of-success/&quot; class=&quot;css-1o1roib&quot;&gt;The Pit of Success&lt;/a&gt;&lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;fn-4&quot; class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://alistapart.com/article/responsive-web-design&quot; class=&quot;css-1o1roib&quot;&gt;Responsive Web Design&lt;/a&gt;&lt;a href=&quot;#fnref-4&quot; class=&quot;footnote-backref css-1o1roib&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Progressive Documentation]]></title><description><![CDATA[When building out JS libraries and components, everyone knows the importance of good documentation.
Without it, good code can end up going…]]></description><link>https://jxnblk.com/blog/progressive-documentation/</link><guid isPermaLink="false">https://jxnblk.com/blog/progressive-documentation/</guid><pubDate>Sat, 01 Sep 2018 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;When building out JS libraries and components, everyone knows the importance of good documentation.
Without it, good code can end up going unused, which leads to duplication.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For many libraries, markdown is an excellent format for writing docs since it&amp;#x27;s based on HTML and renders nicely in a variety of tools like &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://github.com&quot; class=&quot;css-1o1roib&quot;&gt;GitHub.com&lt;/a&gt;.
But markdown can fall a little short when documenting front-end UI components,
where demos and the ability to interact with a component in the browser is immensely helpful.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;mdx&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#mdx&quot; class=&quot;css-1unrqcp&quot;&gt;MDX&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;a href=&quot;https://mdxjs.com&quot; class=&quot;css-1o1roib&quot;&gt;MDX&lt;/a&gt; was built with some of this in mind.
It gives you the simplicity of writing markdown combined with the ability to import and use React components with JSX.
More and more tools are adding support for MDX,
making using it as a documentation format a no-brainer.&lt;/p&gt;&lt;h2 id=&quot;documentation-tools&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#documentation-tools&quot; class=&quot;css-1unrqcp&quot;&gt;Documentation Tools&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While there are several great tools out there for creating high-quality documentation sites,
such as &lt;a href=&quot;https://github.com/zeit/next.js/&quot; class=&quot;css-1o1roib&quot;&gt;Next.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/gatsbyjs/gatsby&quot; class=&quot;css-1o1roib&quot;&gt;Gatsby&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/Docusaurus&quot; class=&quot;css-1o1roib&quot;&gt;Docusaurus&lt;/a&gt;, and &lt;a href=&quot;https://github.com/pedronauck/docz&quot; class=&quot;css-1o1roib&quot;&gt;Docz&lt;/a&gt;,
many of these tools require custom setup and configuration outside of your source code
and can be a distraction if you&amp;#x27;re trying to quickly create documentation for something new.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Additionally, these tools don&amp;#x27;t always make it easy to set up documentation to serve as a development tool while working on the source code.
There are other tools out there for quickly developing components in isolation,
but they tend to use proprietary APIs and don&amp;#x27;t scale well, still requiring separate documentation as a project grows.&lt;/p&gt;&lt;h2 id=&quot;introducing-mdx-go&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#introducing-mdx-go&quot; class=&quot;css-1unrqcp&quot;&gt;Introducing mdx-go&lt;/a&gt;&lt;/h2&gt;&lt;video src=&quot;https://s3.amazonaws.com/jxnblk/mdx-go-24.mp4&quot; playsinline=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; style=&quot;max-width:100%&quot;&gt;&lt;/video&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;a href=&quot;https://github.com/jxnblk/mdx-go&quot; class=&quot;css-1o1roib&quot;&gt;mdx-go&lt;/a&gt; is a development tool for &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;progressive documentation&lt;/strong&gt;
and is meant to be used alongside your tools of choice for building documentation sites.
It allows you to quickly prototype, draft docs, or build simple demos outside of a larger application.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;mdx-go is built with the following goals in mind:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Make it easy to focus on writing docs, not setting up an application&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;View and interact with components with zero setup or configuration&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Always have a dev server ready to go, even alongside your source code&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Reduce lock-in and embrace the portability of the MDX file format&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;dont-boil-the-ocean&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#dont-boil-the-ocean&quot; class=&quot;css-1unrqcp&quot;&gt;Don&amp;#x27;t boil the ocean&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;By starting docs for a new project with mdx-go,
you can focus on writing docs immediately,
and you won&amp;#x27;t be locked into custom APIs or build setups,
meaning that upgrading to other documentation solutions later on is easy when you&amp;#x27;re ready to.
The related &lt;a href=&quot;https://github.com/jxnblk/mdx-docs&quot; class=&quot;css-1o1roib&quot;&gt;mdx-docs&lt;/a&gt; project is one way to migrate a directory of MDX files over to using Next.js.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;mdx-go also works well as a local sandbox development environment, and you can continue to use it alongside other documentation tools.
It offers static site exporting for sharing work-in-progress demos or drafts with others.&lt;/p&gt;&lt;h2 id=&quot;choose-the-right-tool-for-the-job&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#choose-the-right-tool-for-the-job&quot; class=&quot;css-1unrqcp&quot;&gt;Choose the right tool for the job&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Tools like mdx-go make it easy to try things out without a lot of setup or getting locked into proprietary APIs.
Every team is different and has different needs, but I hope mdx-go is a helpful addition to your development toolkit.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To learn more &lt;a href=&quot;https://github.com/jxnblk/mdx-go&quot; class=&quot;css-1o1roib&quot;&gt;see the mdx-go docs&lt;/a&gt;.&lt;/p&gt;&lt;style data-emotion-css=&quot;18qluqq&quot;&gt;.css-18qluqq{margin-top:64px;margin-bottom:64px;border:0;border-bottom:1px solid;}&lt;/style&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;h2 id=&quot;further-reading&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#further-reading&quot; class=&quot;css-1unrqcp&quot;&gt;Further Reading&lt;/a&gt;&lt;/h2&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://spectrum.chat/thread/1021be59-2738-4511-aceb-c66921050b9a&quot; class=&quot;css-1o1roib&quot;&gt;Initial MDX Proposal on Spectrum.chat&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://mdxjs.com&quot; class=&quot;css-1o1roib&quot;&gt;mdxjs.com&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;http://youtu.be/d2sQiI5NFAM?a&quot; class=&quot;css-1o1roib&quot;&gt;What is MDX&lt;/a&gt; by Kent C. Dodds&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://compositor.io/blog/x0-making-react-component-development-stupid-simple/&quot; class=&quot;css-1o1roib&quot;&gt;x0: Making React Component Development Stupid Simple&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;http://jxnblk.com/blog/posts/defining-component-apis-in-react/&quot; class=&quot;css-1o1roib&quot;&gt;Defining Component APIs in React&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Defining Component APIs in React]]></title><description><![CDATA[Over the years, I’ve noticed patterns in how I tend to approach component APIs and building out applications and libraries. The following is a collection of thoughts, opinions, and advice for defining component APIs that are meant to be more flexible, composable, and easier to understand. None of these are hard-and-fast rules, but they’ve helped guide the way I think about organizing and creating components.]]></description><link>https://jxnblk.com/blog/defining-component-apis-in-react/</link><guid isPermaLink="false">https://jxnblk.com/blog/defining-component-apis-in-react/</guid><pubDate>Sun, 08 Jul 2018 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Over the years, I’ve noticed patterns in how I tend to approach component APIs and building out applications and libraries.
The following is a collection of thoughts, opinions, and advice for defining component APIs that are meant to be more flexible, composable, and easier to understand.
None of these are hard-and-fast rules, but they’ve helped guide the way I think about organizing and creating components.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;aim-for-a-small-api-surface-area&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#aim-for-a-small-api-surface-area&quot; class=&quot;css-1unrqcp&quot;&gt;Aim for a small API surface area&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Just as the React library itself aims for a &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4anAwXYqLG8&quot; class=&quot;css-1o1roib&quot;&gt;Minimal API Surface Area&lt;/a&gt;,
I recommend adopting a similar mindset when it comes to defining component APIs.
The fewer new things you need to learn, the easier it is for others to know how to use the components
that you create, making them more reusable.
If someone doesn’t understand your component API, the chance that they’ll duplicate your work increases.
This idea is at the core of how I approach creating components, and I find it helpful to keep in mind as I work.&lt;/p&gt;&lt;h2 id=&quot;make-things-easy-to-find&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#make-things-easy-to-find&quot; class=&quot;css-1unrqcp&quot;&gt;Make things easy to find&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Start with a flat directory structure and don’t prematurely organize your code base.
Humans love to organize things, but we’re also really terrible at it.
Naming things is hard enough, and by creating a directory structure around your component library,
you might end up doing more work that makes it more difficult for others to find the things you’ve done.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A single directory of components can get quite large before it becomes difficult for people to manage.
And if all the components are in a single folder,
you’ll get alphabetical ordering for free in most file-system tools,
which can help provide a more complete picture of the code base for others.&lt;/p&gt;&lt;h2 id=&quot;avoid-renderthing-methods&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#avoid-renderthing-methods&quot; class=&quot;css-1unrqcp&quot;&gt;Avoid renderThing methods&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you’ve defined a custom method in your component that starts with the word &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;render&lt;/code&gt;,
chances are that should be its own component.
As &lt;a href=&quot;https://mobile.twitter.com/chrisbiscardi/status/1004559213320814592&quot; class=&quot;css-1o1roib&quot;&gt;Chris Biscardi&lt;/a&gt; puts it, &lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;“[It] effectively means there’s enough complexity to be worth breaking down”&lt;/strong&gt;.
React’s smart about when to render or not render a component,
so by splitting these out into their own components, you can help React do its job better.&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// Instead of this
class Items extends React.Component {
  renderItems ({ items }) {
    return items.map(item =&amp;gt; (
      &amp;lt;li key={item.id}&amp;gt;
        {renderItem(item)}
      &amp;lt;/li&amp;gt;
    ))
  }

  renderItem (item) {
    return (
      &amp;lt;div&amp;gt;
        {item.name}
      &amp;lt;/div&amp;gt;
    )
  }

  render () {
    return (
      &amp;lt;ul&amp;gt;
        {renderItems(this.props)
      &amp;lt;/ul&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// Do this
const ItemList = ({ items }) =&amp;gt;
  &amp;lt;ul&amp;gt;
    {items.map(item =&amp;gt; (
      &amp;lt;li key={item.id}&amp;gt;
        &amp;lt;Item {...item} /&amp;gt;
      &amp;lt;/li&amp;gt;
    )}
  &amp;lt;/ul&amp;gt;

const Item = ({ name }) =&amp;gt;
  &amp;lt;div&amp;gt;{item.name}&amp;lt;/div&amp;gt;

class Items extends React.Component {
  render () {
    const { items } = this.props
    return &amp;lt;ItemList items={items} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;split-components-at-data-boundaries&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#split-components-at-data-boundaries&quot; class=&quot;css-1unrqcp&quot;&gt;Split components at data boundaries&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Often, components should be defined by the shape of your data.&lt;/p&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Since you’re often displaying a JSON data model to a user, you’ll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;– &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot; class=&quot;css-1o1roib&quot;&gt;Thinking in React&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I often see people new to React attempt to replicate what I call &amp;quot;&lt;a href=&quot;https://getbootstrap.com&quot; class=&quot;css-1o1roib&quot;&gt;Bootstrap&lt;/a&gt;&amp;quot; components,
that is UI components that have a visual boundary that’s not directly tied to any data structure.
React and BEM-like CSS-based components have different concerns.
Instead of creating a generic Card component that displays an image, heading, and link,
and that would require a custom props API, build components for the data that you’re displaying.
Maybe the generic Card component should be a ProductCard component that can accept the &lt;code class=&quot;css-12ivgcj&quot;&gt;product&lt;/code&gt; object from your database.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// Instead of this
&amp;lt;Card
  image={product.thumbnail}
  title={product.name}
  text={product.description}
  link={product.permalink}
/&amp;gt;

// Do this
&amp;lt;ProductCard {...product} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Chances are, the specific styling that you need for the ProductCard isn’t all that reusable,
and you’ll likely only have this defined in one place in your code base.
You can follow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot; class=&quot;css-1o1roib&quot;&gt;Rule of Three&lt;/a&gt; in situations like this.
If you&amp;#x27;ve duplicated the exact Card component structure three times in your code base,
then it’s probably worth abstracting it out into its own component.&lt;/p&gt;&lt;h2 id=&quot;avoid-apropcalypse&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#avoid-apropcalypse&quot; class=&quot;css-1unrqcp&quot;&gt;Avoid Apropcalypse&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;As &lt;a href=&quot;https://twitter.com/gurlcode&quot; class=&quot;css-1o1roib&quot;&gt;Jenn Creighton&lt;/a&gt; calls it, avoid &lt;a href=&quot;https://speakerdeck.com/jenncreighton/flexible-architecture-for-react-components?slide=10&quot; class=&quot;css-1o1roib&quot;&gt;Apropcalypse&lt;/a&gt;.
Don’t be afraid to create a new component rather than adding abritrary props and additional logic to a component.
For example, a Button component might accept props for different colors, sizes, and shapes,
but there’s not always a need to have every combination of those props available.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// Instead of this
&amp;lt;Button
  variant=&amp;#x27;secondary&amp;#x27;
  size=&amp;#x27;large&amp;#x27;
  outline
  label=&amp;#x27;Buy Now&amp;#x27;
  icon=&amp;#x27;shoppingBag&amp;#x27;
  onClick={handleClick}
/&amp;gt;

// Do this
&amp;lt;SecondaryButton
  size=&amp;#x27;large&amp;#x27;
  onClick={handleClick}&amp;gt;
  &amp;lt;Icon name=&amp;#x27;shoppingBag&amp;#x27; /&amp;gt;
  Buy Now
&amp;lt;/SecondaryButton&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Your needs may vary, but reducing the number of custom props that any component requires is generally helpful,
and reducing the amount of logic in the render function can make the code base simpler and better-suited for code splitting.&lt;/p&gt;&lt;h2 id=&quot;use-composition&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#use-composition&quot; class=&quot;css-1unrqcp&quot;&gt;Use composition&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Don’t reinvent &lt;code class=&quot;css-12ivgcj&quot;&gt;props.children&lt;/code&gt;.
If you’ve defined props that take arbitrary strings of text that aren’t based on a data structure,
it’s probably better to use composition.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// Instead of this
&amp;lt;Header
  title=&amp;#x27;Hello&amp;#x27;
  subhead=&amp;#x27;This is a header&amp;#x27;
  text=&amp;#x27;And it has arbitrary props&amp;#x27;
/&amp;gt;

// Do this
&amp;lt;Header&amp;gt;
  &amp;lt;Heading&amp;gt;Hello&amp;lt;/Heading&amp;gt;
  &amp;lt;Subhead&amp;gt;This is a header&amp;lt;/Subhead&amp;gt;
  &amp;lt;Text&amp;gt;And it uses composition&amp;lt;/Text&amp;gt;
&amp;lt;/Header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you know React, you’ll already know the API for the composed version, and it shouldn’t require as much documentation as the former.
You might wrap the composed version into another component that &lt;strong class=&quot;css-1vg6q84&quot;&gt;is&lt;/strong&gt; tied to a piece of data in your application,
but you’ll probably only need that component structure defined once in your code base.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// This makes sense as a component since it’s based on data
const PageHeader = ({
  title,
  description
}) =&amp;gt;
  &amp;lt;Header&amp;gt;
    &amp;lt;Heading&amp;gt;{title}&amp;lt;/Heading&amp;gt;
    &amp;lt;Text&amp;gt;{description}&amp;lt;/Text&amp;gt;
  &amp;lt;/Header&amp;gt;

// And ideally can be used like this
&amp;lt;PageHeader {...page} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;avoid-boolean-props-for-enums&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#avoid-boolean-props-for-enums&quot; class=&quot;css-1unrqcp&quot;&gt;Avoid boolean props for enums&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;It might be tempting to use &lt;a href=&quot;https://mobile.twitter.com/satya164/status/1015206655997472768&quot; class=&quot;css-1o1roib&quot;&gt;boolean props&lt;/a&gt; as a convenient way to switch between variants of a component,
but it can sometimes create a confusing API.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Take the following example:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;&amp;lt;Button primary /&amp;gt;
&amp;lt;Button secondary /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;What happens in the following case?&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;&amp;lt;Button primary secondary /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;It’s impossible to know without diving into the code base or documentation.
Instead, try the following:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;&amp;lt;Button variant=&amp;#x27;primary&amp;#x27; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;It’s a little more typing but arguably much more readable.&lt;/p&gt;&lt;h2 id=&quot;keep-props-apis-parallel&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#keep-props-apis-parallel&quot; class=&quot;css-1unrqcp&quot;&gt;Keep props APIs parallel&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Whenever possible, resuse props from other components. For example, if you’re creating a date picker, use the same props that the native &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;input type=&amp;#x27;date&amp;#x27; /&amp;gt;&lt;/code&gt; expects.
It’ll be easier to guess how it works and also easier to remember.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// Instead of this
&amp;lt;DatePicker
  date={date}
  onSelect={handleDateChange}
/&amp;gt;

// Do this
&amp;lt;DatePicker
  value={date}
  onChange={handleDateChange}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;a href=&quot;https://jxnblk.com/styled-system&quot; class=&quot;css-1o1roib&quot;&gt;Styled System&lt;/a&gt; library encourages using a parallel style props API across multiple components.
For example, the &lt;code class=&quot;css-12ivgcj&quot;&gt;color&lt;/code&gt; prop works the same for all components included in &lt;a href=&quot;https://jxnblk.com/rebass&quot; class=&quot;css-1o1roib&quot;&gt;Rebass&lt;/a&gt;,
which ends up having a sort of &lt;strong class=&quot;css-1vg6q84&quot;&gt;learn once, use anywhere&lt;/strong&gt; effect.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-jsx css-h2uv5g&quot;&gt;// example from Rebass
&amp;lt;Box color=&amp;#x27;tomato&amp;#x27; /&amp;gt;
&amp;lt;Heading color=&amp;#x27;tomato&amp;#x27; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;ask-your-teammates&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#ask-your-teammates&quot; class=&quot;css-1unrqcp&quot;&gt;Ask your teammates&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;These are just some of my own thoughts on how to define component APIs, and they might not suit your needs.
The best advice I can give is to talk to your teammates, create RFCs and PRs,
and try &lt;a href=&quot;https://ponyfoo.com/articles/readme-driven-development&quot; class=&quot;css-1o1roib&quot;&gt;Readme Driven Development&lt;/a&gt;.
Writing React components is easy.
Creating a library of components that works well for your team is worth the time and effort to get right.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Patterns for Style Composition in React]]></title><description><![CDATA[While React is extremely flexible in terms of how you can structure your application’s UI, I’ve found that a few patterns for style composition have helped me keep things organized and easy to work with.]]></description><link>https://jxnblk.com/blog/patterns-for-style-composition-in-react/</link><guid isPermaLink="false">https://jxnblk.com/blog/patterns-for-style-composition-in-react/</guid><pubDate>Sat, 13 Aug 2016 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While React is extremely flexible in terms of how you can structure your application’s UI,
I’ve found that a few patterns for style composition have helped me keep things
organized and easy to work with.
These aren’t hard-and-fast rules, these are simply reflections on how I’ve come to organize components in apps that I’ve worked on.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ve gravitated towards these patterns in an effort to:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Create a well-defined visual design system&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Help maintain visual consistency across an application&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Only deliver the CSS/styles needed to the client for a given UI – i.e. performance&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Increase the maintainability of visual styles&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Make updates and iterations on styles easier&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Make legacy styles easier to deprecate&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Create more readable components&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Make building out new UI easier and faster&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Keep styles encapsulated to help prevent collisions and unwanted side effects&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Create an easy-to-use component API for non-front-end developers&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Although the level of abstraction here might look like overkill for smaller projects,
I find that this general approach has sped up my development across the board.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I won’t get into approaches for state management or handling the business logic of your app,
instead I’ll be focusing primarily on the visible and interactive parts of the UI.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;stateless-functional-ui-components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#stateless-functional-ui-components&quot; class=&quot;css-1unrqcp&quot;&gt;Stateless Functional UI Components&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Generally, I like to keep styles separated from the parts of the app that are tied to state.
That means routes, views, containers, forms, layouts, etc. should not have any styling or classes in them.
Instead, these heavy-lifting components should be composed of primarily stateless functional UI components,
sometimes referred to as &lt;em class=&quot;css-0&quot;&gt;presentational&lt;/em&gt; components.
By keeping styling concerns separate from the application state,
pieces can become more reusable and building out new views and containers can be quicker.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For example, a form component render method might look something like this:&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;render () {
  return (
    &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
      &amp;lt;Heading children=&amp;#x27;Sign In&amp;#x27; /&amp;gt;
      &amp;lt;Input
        name=&amp;#x27;username&amp;#x27;
        value={username}
        onChange={this.handleChange} /&amp;gt;
      &amp;lt;Input
        type=&amp;#x27;password&amp;#x27;
        name=&amp;#x27;password&amp;#x27;
        value={password}
        onChange={this.handleChange} /&amp;gt;
      &amp;lt;Button
        type=&amp;#x27;submit&amp;#x27;
        children=&amp;#x27;Sign In&amp;#x27; /&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Notice how none of the elements have a &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;className&lt;/code&gt; or &lt;code class=&quot;css-12ivgcj&quot;&gt;style&lt;/code&gt; prop.
Using &lt;code class=&quot;css-12ivgcj&quot;&gt;className&lt;/code&gt; or &lt;code class=&quot;css-12ivgcj&quot;&gt;style&lt;/code&gt; props at this level &lt;em class=&quot;css-0&quot;&gt;could&lt;/em&gt; be considered a code smell.
Each UI component used here encapsulates its own styling,
and the styling simply becomes an implementation detail,
which means a UI component can be updated or refactored without affecting anything else in the application.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;An example Button component, like the one in the form above, might look something like the following:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const Button = ({
  ...props
}) =&amp;gt; {
  const sx = {
    fontFamily: &amp;#x27;inherit&amp;#x27;,
    fontSize: &amp;#x27;inherit&amp;#x27;,
    fontWeight: &amp;#x27;bold&amp;#x27;,
    textDecoration: &amp;#x27;none&amp;#x27;,
    display: &amp;#x27;inline-block&amp;#x27;,
    margin: 0,
    paddingTop: 8,
    paddingBottom: 8,
    paddingLeft: 16,
    paddingRight: 16,
    border: 0,
    color: &amp;#x27;white&amp;#x27;,
    backgroundColor: &amp;#x27;blue&amp;#x27;,
    WebkitAppearance: &amp;#x27;none&amp;#x27;,
    MozAppearance: &amp;#x27;none&amp;#x27;
  }

  return (
    &amp;lt;button {...props} style={sx} /&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Button usage
&amp;lt;Button onClick={this.handleClick}&amp;gt;
  Hello
&amp;lt;/Button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ve used inline styles here for readability and to help demonstrate how this works,
but any CSS-in-JS solution can be used instead and won’t have any affect on the form component above.
By keeping all styling encapsulated in this component,
the rest of the application doesn’t need to know anything about the Button beyond its props API.&lt;/p&gt;&lt;h2 id=&quot;styles-module&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#styles-module&quot; class=&quot;css-1unrqcp&quot;&gt;Styles Module&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;You may have noticed that a few property values were hard-coded into the Button example.
Generally, I wouldn’t recommend hard-coding things in like that.
Any values that are likely to be used across different UI components should be split into their own module.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Here is an example module to start with:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;export const white = &amp;#x27;#fff&amp;#x27;
export const black = &amp;#x27;#111&amp;#x27;
export const blue = &amp;#x27;#07c&amp;#x27;

export const colors = {
  white,
  black,
  blue
}

export const space = [
  0,
  8,
  16,
  32,
  64
]

const styles = {
  bold: 600,
  space,
  colors
}

export default styles
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;And here is what the updated Button component could look like:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;import React from &amp;#x27;react&amp;#x27;
import { bold, space, colors } from &amp;#x27;./styles&amp;#x27;

const Button = ({
  ...props
}) =&amp;gt; {
  const sx = {
    fontFamily: &amp;#x27;inherit&amp;#x27;,
    fontSize: &amp;#x27;inherit&amp;#x27;,
    fontWeight: bold,
    textDecoration: &amp;#x27;none&amp;#x27;,
    display: &amp;#x27;inline-block&amp;#x27;,
    margin: 0,
    paddingTop: space[1],
    paddingBottom: space[1],
    paddingLeft: space[2],
    paddingRight: space[2],
    border: 0,
    color: colors.white,
    backgroundColor: colors.blue,
    WebkitAppearance: &amp;#x27;none&amp;#x27;,
    MozAppearance: &amp;#x27;none&amp;#x27;
  }

  return (
    &amp;lt;button {...props} style={sx} /&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The style object could store anything related to styling that is shared across components,
including borders, border radii, shadows, animation duration, etc.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;You could even export more elaborate combinations of styles like the following:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;export const cardStyle = {
  backgroundColor: white,
  borderRadius: 3,
  boxShadow: `0 0 4px ${shade[1]}`
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;But I’d recommend delegating combinations like these to components and using composition instead, as I’ll show below.&lt;/p&gt;&lt;h2 id=&quot;style-functions&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#style-functions&quot; class=&quot;css-1unrqcp&quot;&gt;Style Functions&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Since we’re using JavaScript, we can also employ helper functions for styling elements.
For example, a function to create &lt;code class=&quot;css-12ivgcj&quot;&gt;rgba&lt;/code&gt; values of black can be very handy.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const darken = (n) =&amp;gt; `rgba(0, 0, 0, ${n})`

darken(1 / 8) // &amp;#x27;rgba(0, 0, 0, 0.125)&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Functions like this can then be used to create a value scale array to help keep things consistent.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const shade = [
  darken(0),
  darken(1 / 8),
  darken(1 / 4),
  darken(3 / 8),
  darken(1 / 2),
  darken(5 / 8),
  darken(3 / 4),
  darken(7 / 8),
  darken(1)
]

shade[4] // &amp;#x27;rgba(0, 0, 0, 0.5)&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Another example would be creating a scale for margin and padding to help keep visual rhythm consistent.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Modular powers of two scale
const scale = [
  0,
  8,
  16,
  32,
  64
]

// Functions to get partial style objects
const createScaledPropertyGetter = (scale) =&amp;gt; (prop) =&amp;gt; (x) =&amp;gt; {
  return (typeof x === &amp;#x27;number&amp;#x27; &amp;amp;&amp;amp; typeof scale[x] === &amp;#x27;number&amp;#x27;)
    ? { [prop]: scale[x] }
    : null
}
const getScaledProperty = createScaledPropertyGetter(scale)

export const getMargin = getScaledProperty(&amp;#x27;margin&amp;#x27;)
export const getPadding = getScaledProperty(&amp;#x27;padding&amp;#x27;)
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Style function usage
const Box = ({
  m,
  p,
  ...props
}) =&amp;gt; {
  const sx = {
    ...getMargin(m),
    ...getPadding(p)
  }

  return &amp;lt;div {...props} style={sx} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Component usage
&amp;lt;div&amp;gt;
  &amp;lt;Box m={2} p={3}&amp;gt;
    A box with 16px margin and 32px padding
  &amp;lt;/Box&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;npm-modules&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#npm-modules&quot; class=&quot;css-1unrqcp&quot;&gt;Npm Modules&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While the rgba color function above is a fairly simple one,
sometimes more complex color transformations can be helpful when creating UI.
Well, we’re in luck, because we can use literally anything on &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://npmjs.com&quot; class=&quot;css-1o1roib&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Instead of the &lt;code class=&quot;css-12ivgcj&quot;&gt;darken&lt;/code&gt; function above, here is an example using &lt;a href=&quot;https://www.npmjs.com/package/chroma-js&quot; class=&quot;css-1o1roib&quot;&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;chroma-js&lt;/code&gt;&lt;/a&gt;’s &lt;code class=&quot;css-12ivgcj&quot;&gt;alpha&lt;/code&gt; function.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;import chroma from &amp;#x27;chroma-js&amp;#x27;

const alpha = (color) =&amp;gt; (a) =&amp;gt; chroma(color).alpha(a).css()

const darken = alpha(&amp;#x27;#000&amp;#x27;)

const shade = [
  darken(0),
  darken(1 / 8),
  darken(1 / 4),
  // ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Using chroma, this function can work with any color from the style object.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const blueAlpha = [
  alpha(blue)(0),
  alpha(blue)(1 / 4),
  alpha(blue)(1 / 2),
  alpha(blue)(3 / 4),
  alpha(blue)(1)
]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;base-component&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#base-component&quot; class=&quot;css-1unrqcp&quot;&gt;Base Component&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Beyond just importing style values, there is a tremendous amount of flexibility
when it comes to composition in React – since components are essentially just functions.
Take the Button component from above, and we’ll change some of the style details to props to make it more reusable.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const Button = ({
  big,
  color = colors.white,
  backgroundColor = colors.blue,
  ...props
}) =&amp;gt; {
  const sx = {
    fontFamily: &amp;#x27;inherit&amp;#x27;,
    fontSize: &amp;#x27;inherit&amp;#x27;,
    fontWeight: bold,
    textDecoration: &amp;#x27;none&amp;#x27;,
    display: &amp;#x27;inline-block&amp;#x27;,
    margin: 0,
    paddingTop: big ? space[2] : space[1],
    paddingBottom: big ? space[2] : space[1],
    paddingLeft: space[2],
    paddingRight: space[2],
    border: 0,
    color,
    backgroundColor,
    WebkitAppearance: &amp;#x27;none&amp;#x27;,
    MozAppearance: &amp;#x27;none&amp;#x27;
  }

  return (
    &amp;lt;button {...props} style={sx} /&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Usage example
&amp;lt;div&amp;gt;
  &amp;lt;Button&amp;gt;
    Blue Button
  &amp;lt;/Button&amp;gt;
  &amp;lt;Button big backgroundColor={colors.red}&amp;gt;
    Big Red Button
  &amp;lt;/Button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;code class=&quot;css-12ivgcj&quot;&gt;color&lt;/code&gt; and &lt;code class=&quot;css-12ivgcj&quot;&gt;backgroundColor&lt;/code&gt; properties have been moved up to the component’s props.
Additionally, we’ve added a &lt;code class=&quot;css-12ivgcj&quot;&gt;big&lt;/code&gt; prop to adjust the padding top and bottom.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Now this component is fine by itself, but what if we want a secondary button style?
Doing the following would become tedious and error prone very quickly:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;&amp;lt;Button
  color={colors.black}
  backgroundColor={colors.lightblue}
  children=&amp;#x27;Secondary Button&amp;#x27; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Instead, we can create a dedicated secondary button component.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;import React from &amp;#x27;react&amp;#x27;
import Button from &amp;#x27;./Button&amp;#x27;

const ButtonSecondary = (props) =&amp;gt; (
  &amp;lt;Button
    {...props}
    color={colors.black}
    backgroundColor={colors.lightblue} /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Usage example
&amp;lt;div&amp;gt;
  &amp;lt;Button&amp;gt;Normal Button&amp;lt;/Button&amp;gt;
  &amp;lt;ButtonSecondary&amp;gt;Secondary Button&amp;lt;/ButtonSecondary&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;By adjusting the props API of the base Button component, an entire set of button styles can be created.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const ButtonBig = (props) =&amp;gt; &amp;lt;Button {...props} big /&amp;gt;
const ButtonGreen = (props) =&amp;gt; &amp;lt;Button {...props} backgroundColor={colors.green} /&amp;gt;
const ButtonRed = (props) =&amp;gt; &amp;lt;Button {...props} backgroundColor={colors.red} /&amp;gt;
const ButtonOutline = (props) =&amp;gt; &amp;lt;Button {...props} outline /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;This pattern lends itself well to layout components as well.
Assume we have a generic Box component that accepts props for various layout styles.
This base layout component can then be used to create grid system components and other primitives.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const Grid = (props) =&amp;gt; (
  &amp;lt;Box {...props}
    display=&amp;#x27;inline-block&amp;#x27;
    verticalAlign=&amp;#x27;top&amp;#x27;
    px={2} /&amp;gt;
)

const Half = (props) =&amp;gt; (
  &amp;lt;Grid {...props}
    width={1 / 2} /&amp;gt;
)

const Third = (props) =&amp;gt; (
  &amp;lt;Grid {...props}
    width={1 / 3} /&amp;gt;
)

const Quarter = (props) =&amp;gt; (
  &amp;lt;Grid {...props}
    width={1 / 4} /&amp;gt;
)

const Flex = (props) =&amp;gt; (
  &amp;lt;Box {...props}
    display=&amp;#x27;flex&amp;#x27; /&amp;gt;
)

const FlexAuto = (props) =&amp;gt; (
  &amp;lt;Box {...props}
    flex=&amp;#x27;1 1 auto&amp;#x27; /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Usage example
&amp;lt;div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;Half&amp;gt;Half width column&amp;lt;/Half&amp;gt;
    &amp;lt;Half&amp;gt;Half width column&amp;lt;/Half&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;Third&amp;gt;Third width column&amp;lt;/Third&amp;gt;
    &amp;lt;Third&amp;gt;Third width column&amp;lt;/Third&amp;gt;
    &amp;lt;Third&amp;gt;Third width column&amp;lt;/Third&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;Quarter&amp;gt;Quarter width column&amp;lt;/Quarter&amp;gt;
    &amp;lt;Quarter&amp;gt;Quarter width column&amp;lt;/Quarter&amp;gt;
    &amp;lt;Quarter&amp;gt;Quarter width column&amp;lt;/Quarter&amp;gt;
    &amp;lt;Quarter&amp;gt;Quarter width column&amp;lt;/Quarter&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Typography styles are another great candidate for building up with composition.
By using a base typographic component, you can help ensure consistency and keep your styling DRY.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;import React from &amp;#x27;react&amp;#x27;
import { alternateFont, typeScale, boldFontWeight } from &amp;#x27;./styles&amp;#x27;

const Text = ({
  tag = &amp;#x27;span&amp;#x27;,
  size = 4,
  alt,
  center,
  bold,
  caps,
  ...props
}) =&amp;gt; {
  const Tag = tag
  const sx = {
    fontFamily: alt ? alternateFont : null,
    fontSize: typeScale[size],
    fontWeight: bold ? boldFontWeight : null,
    textAlign: center ? &amp;#x27;center&amp;#x27; : null,
    textTransform: caps ? &amp;#x27;uppercase&amp;#x27; : null
  }

  return &amp;lt;Tag {...props} style={sx} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const LeadText = (props) =&amp;gt; &amp;lt;Text {...props} tag=&amp;#x27;p&amp;#x27; size={3} /&amp;gt;
const Caps = (props) =&amp;gt; &amp;lt;Text {...props} caps /&amp;gt;
const MetaText = (props) =&amp;gt; &amp;lt;Text {...props} size={5} caps /&amp;gt;
const AltParagraph = (props) =&amp;gt; &amp;lt;Text {...props} tag=&amp;#x27;p&amp;#x27; alt /&amp;gt;

const CapsButton = ({ children, ...props }) =&amp;gt; (
  &amp;lt;Button {...props}&amp;gt;
    &amp;lt;Caps&amp;gt;
      {children}
    &amp;lt;/Caps&amp;gt;
  &amp;lt;/Button&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Usage example
&amp;lt;div&amp;gt;
  &amp;lt;LeadText&amp;gt;
    This is a lead with some &amp;lt;Caps&amp;gt;all caps&amp;lt;/Caps&amp;gt;.
    It has a larger font size than the default paragraph.
  &amp;lt;/LeadText&amp;gt;
  &amp;lt;MetaText&amp;gt;
    This is smaller text, like form helper copy.
  &amp;lt;/MetaText&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Keep in mind, that these components are just a few examples and your needs will vary greatly on an app-by-app basis.&lt;/p&gt;&lt;h2 id=&quot;higher-order-components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#higher-order-components&quot; class=&quot;css-1unrqcp&quot;&gt;Higher Order Components&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’m generally a fan of keeping most of an applications state at the top level of a React tree,
often using something like &lt;a href=&quot;https://github.com/reactjs/redux&quot; class=&quot;css-1o1roib&quot;&gt;Redux&lt;/a&gt;.
However, sometimes there are isolated UI components that only require a minimal amount of state for interaction,
and using them as standalone components is sufficient.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;One example of this is a carousel&lt;a href=&quot;#*&quot; class=&quot;css-1o1roib&quot;&gt;*&lt;/a&gt;, where the state of the current slide generally doesn’t need to persist across page views.
Instead of combining the state of the carousel with its UI, we can create a higher order component for better reusability.
The higher order component will have a current slide index and have previous and next methods.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Higher order component
import React from &amp;#x27;react&amp;#x27;

// This could be named something more generic like Counter or Cycle
const CarouselContainer = (Comp) =&amp;gt; {
  class Carousel extends React.Component {
    constructor () {
      super()
      this.state = {
        index: 0
      }
      this.previous = () =&amp;gt; {
        const { index } = this.state
        if (index &amp;gt; 0) {
          this.setState({ index: index - 1})
        }
      }

      this.next = () =&amp;gt; {
        const { index } = this.state
        this.setState({ index: index + 1 })
      }
    }

    render () {
      return (
        &amp;lt;Comp
          {...this.props}
          {...this.state}
          previous={this.previous}
          next={this.next} /&amp;gt;
      )
    }
  }

  return Carousel
}

export default CarouselContainer
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Using a higher order component we can create a carousel from any number of UI elements.
For example, a simple carousel may have only previous and next buttons,
while a more complex one might include image thumbnails of each slide across the bottom.
Both of these can use the same higher order component to handle their state.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// UI component
const Carousel = ({ index, ...props }) =&amp;gt; {
  const length = props.length || props.children.length || 0

  const sx = {
    root: {
      overflow: &amp;#x27;hidden&amp;#x27;
    },
    inner: {
      whiteSpace: &amp;#x27;nowrap&amp;#x27;,
      height: &amp;#x27;100%&amp;#x27;,
      transition: &amp;#x27;transform .2s ease-out&amp;#x27;,
      transform: `translateX(${index % length * -100}%)`
    },
    child: {
      display: &amp;#x27;inline-block&amp;#x27;,
      verticalAlign: &amp;#x27;middle&amp;#x27;,
      whiteSpace: &amp;#x27;normal&amp;#x27;,
      outline: &amp;#x27;1px solid red&amp;#x27;,
      width: &amp;#x27;100%&amp;#x27;,
      height: &amp;#x27;100%&amp;#x27;
    }
  }

  const children = React.Children.map(props.children, (child, i) =&amp;gt; {
    return (
      &amp;lt;div style={sx.child}&amp;gt;
        {child}
      &amp;lt;/div&amp;gt;
    )
  })

  return (
    &amp;lt;div style={sx.root}&amp;gt;
      &amp;lt;div style={sx.inner}&amp;gt;
        {children}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Final Carousel component
const HeroCarousel = (props) =&amp;gt; {
    return (
    &amp;lt;div&amp;gt;
      &amp;lt;Carousel index={props.index}&amp;gt;
        &amp;lt;div&amp;gt;Slide one&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Slide two&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Slide three&amp;lt;/div&amp;gt;
      &amp;lt;/Carousel&amp;gt;
      &amp;lt;Button
        onClick={props.previous}
        children=&amp;#x27;Previous&amp;#x27; /&amp;gt;
      &amp;lt;Button
        onClick={props.next}
        children=&amp;#x27;Next&amp;#x27; /&amp;gt;
    &amp;lt;/div&amp;gt;
    )
}

// Wrap the component with the functionality from the higher order component
export default CarouselContainer(HeroCarousel)
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Usage example
&amp;lt;div&amp;gt;
  &amp;lt;HeroCarousel /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;By keeping the styling separate from the interactive state,
any number of carousel variations can be created from these reusable parts.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Just like the base component pattern above, higher order components
can work well for styling layout, typography and colors.
This is the same pattern used in &lt;a href=&quot;https://github.com/jxnblk/reflexbox&quot; class=&quot;css-1o1roib&quot;&gt;Reflexbox&lt;/a&gt;,
and similar to Rebass’s &lt;a href=&quot;https://github.com/jxnblk/rebass/blob/master/src/Base.js&quot; class=&quot;css-1o1roib&quot;&gt;Base component&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;further-exploration&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#further-exploration&quot; class=&quot;css-1unrqcp&quot;&gt;Further Exploration&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;These are just a few patterns that I’ve found to be the most useful
when it comes to styling UI in a component-based system.
I’m curious to know if anyone else has found similar patterns that they’ve found helpful,
and I’m sure there are even more ways to create more beautiful, more flexible, and more maintainable visual design systems.&lt;/p&gt;&lt;style data-emotion-css=&quot;18qluqq&quot;&gt;.css-18qluqq{margin-top:64px;margin-bottom:64px;border:0;border-bottom:1px solid;}&lt;/style&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;style data-emotion-css=&quot;1bbz37o&quot;&gt;.css-1bbz37o{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:20px;}&lt;/style&gt;&lt;h3 id=&quot;a-note-about-performance&quot; class=&quot;css-1bbz37o&quot;&gt;&lt;a href=&quot;#a-note-about-performance&quot; class=&quot;css-1unrqcp&quot;&gt;A Note About Performance&lt;/a&gt;&lt;/h3&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While there are many different ways to handle styling in a component-based app,
make sure to pay close attention to the size of your bundle.
It can be easy to create the wrong abstractions and end up with needless bloat.
Some of the patterns in this article, when taken to their logical extreme,
could actually harm the performance and create a degraded experience for your end users.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;And remember, everything related to styling that you do should be for the user’s benefit, not your own.&lt;/p&gt;&lt;hr class=&quot;css-18qluqq&quot;/&gt;&lt;small id=&quot;*&quot;&gt;* Please don’t use carousels in your app. Users hate them.&lt;/small&gt;</content:encoded></item><item><title><![CDATA[Universal UI Components]]></title><description><![CDATA[For a while now, I’ve been interested in the idea of creating portable,
interoperable functional UI components that can work in any DOM…]]></description><link>https://jxnblk.com/blog/universal-ui-components/</link><guid isPermaLink="false">https://jxnblk.com/blog/universal-ui-components/</guid><pubDate>Wed, 06 Jul 2016 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For a while now, I’ve been interested in the idea of creating portable,
interoperable functional UI components that can work in any DOM rendering library,
whether it’s
&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; class=&quot;css-1o1roib&quot;&gt;React&lt;/a&gt;,
&lt;a href=&quot;https://preactjs.com&quot; class=&quot;css-1o1roib&quot;&gt;Preact&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot; class=&quot;css-1o1roib&quot;&gt;hyperscript&lt;/a&gt;,
&lt;a href=&quot;https://github.com/shama/bel&quot; class=&quot;css-1o1roib&quot;&gt;bel&lt;/a&gt;,
&lt;a href=&quot;https://github.com/maxogden/yo-yo&quot; class=&quot;css-1o1roib&quot;&gt;yo-yo&lt;/a&gt;,
or some other library.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The idea of functional UI components is a simple one: pass arguments into a function and it returns a representation of the DOM,
usually with encapsulated styles and interactivity handled with callbacks to a global state, a la Redux.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you look at the currently available technology, there are predominantly three ways to create these components:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://facebook.github.io/jsx/&quot; class=&quot;css-1o1roib&quot;&gt;&lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;JSX&lt;/strong&gt;&lt;/a&gt; (from React) - uses an XML-like syntax to call functions that return representations of DOM elements&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot; class=&quot;css-1o1roib&quot;&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;Hyperscript&lt;/strong&gt;&lt;/a&gt; - similar to JSX, but uses standard JavaScript syntax and function calls&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot; class=&quot;css-1o1roib&quot;&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;ES2015 tagged template literals&lt;/strong&gt;&lt;/a&gt; - a new string type introduced to JavaScript&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Each has its own pros and cons. While JSX is mostly syntactic sugar, some prefer to use standard JavaScript syntax.
One big advantage JSX has is that it abstracts away the function used to create DOM elements.
For example, React uses &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;React.createElement&lt;/code&gt; while Preact uses &lt;code class=&quot;css-12ivgcj&quot;&gt;Preact.h&lt;/code&gt;.
The pragma used in JSX is configurable by the end user.
Hyperscript, although older than JSX, uses a similar function, but is written in standard JavaScript.
Tagged template literals are also standard JavaScript,
but require a little bit of extra code to change template literals into DOM elements.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;the-same-but-different&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#the-same-but-different&quot; class=&quot;css-1unrqcp&quot;&gt;The same, but different&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Assuming we pick one of the above syntaxes,
there are relatively few differences among the implementations of components across libraries.
For example, here is a bare-bones Button component for several different libraries.
For brevity, styles have been left out of these examples.&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// React using JSX
import React from &amp;#x27;react&amp;#x27;

const Button = (props) =&amp;gt; (
  &amp;lt;button {...props} /&amp;gt;
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Preact using JSX
import { h } from &amp;#x27;preact&amp;#x27;

const Button = (props) =&amp;gt; (
  &amp;lt;button {...props} /&amp;gt;
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Hyperscript
import h from &amp;#x27;hyperscript&amp;#x27;

const Button = (props) =&amp;gt; (
  h(&amp;#x27;button&amp;#x27;, props)
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// yo-yo using tagged template literals
import yo from &amp;#x27;yo-yo&amp;#x27;

const Button = ({ text, ...props }) =&amp;gt; (
  yo`&amp;lt;button ${props}&amp;gt;${text}&amp;lt;/button`
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;There are still quite a few differences in syntax between JSX, hyperscript, and tagged template literals.
For the sake of this post, I’ll focus on implementing these components in JSX.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The first three examples are covered, but here’s what the hyperscript and yo-yo examples would look like in JSX.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Hyperscript with JSX
import h from &amp;#x27;hyperscript&amp;#x27;

const Button = (props) =&amp;gt; (
  &amp;lt;button {...props} /&amp;gt;
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// bel (yo-yo) with JSX
// yo-yo uses the bel package to create elements
import { createElement } from &amp;#x27;bel&amp;#x27;

const Button = (props) =&amp;gt; (
  &amp;lt;button {...props} /&amp;gt;
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For each of the non-React versions, JSX needs to be configured to use the appropriate pragma.
Hyperscript and Preact both name their create element functions &lt;code class=&quot;css-12ivgcj&quot;&gt;h&lt;/code&gt;.
Here is an example &lt;code class=&quot;css-12ivgcj&quot;&gt;.babelrc&lt;/code&gt; configuration.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-json css-h2uv5g&quot;&gt;{
  &amp;quot;presets&amp;quot;: [
    &amp;quot;es2015&amp;quot;,
    &amp;quot;stage-0&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: [
    [
      &amp;quot;transform-react-jsx&amp;quot;,
      { &amp;quot;pragma&amp;quot;: &amp;quot;h&amp;quot; }
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Although the other libraries name their create element functions differently,
they can all be named &lt;code class=&quot;css-12ivgcj&quot;&gt;h&lt;/code&gt; within the components for cross-library compatibility.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// React using JSX
import { createElement as h } from &amp;#x27;react&amp;#x27;

const Button = (props) =&amp;gt; (
  &amp;lt;button {...props} /&amp;gt;
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;At this point, the only difference in these components across libraries is the &lt;code class=&quot;css-12ivgcj&quot;&gt;import&lt;/code&gt; statement.
Using a module bundler like webpack, even this can be abstracted out of the component module.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Using webpack’s ProvidePlugin, the create element function can be exposed to all modules.
This does involve having a variable in the global scope, but I think the trade-off might be worth it in some cases.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Custom create-element module
const h = require(&amp;#x27;preact&amp;#x27;).h
module.exports = h
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Example webpack configuration for Preact
const path = require(&amp;#x27;path&amp;#x27;)
const webpack = require(&amp;#x27;webpack&amp;#x27;)

module.exports = {
  ...,
  plugins: [
    new webpack.ProvidePlugin([
      h: path.resolve(&amp;#x27;./preact-create-element&amp;#x27;)
    ])
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To avoid variable collisions, the function could be named anything (e.g. &lt;code class=&quot;css-12ivgcj&quot;&gt;__h&lt;/code&gt;) as long as the &lt;code class=&quot;css-12ivgcj&quot;&gt;.babelrc&lt;/code&gt; pragma matches.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In addition to the name of the create element function, there are some slight differences in the naming conventions
for HTML attributes (e.g. &lt;code class=&quot;css-12ivgcj&quot;&gt;htmlFor&lt;/code&gt; and &lt;code class=&quot;css-12ivgcj&quot;&gt;className&lt;/code&gt;) and handling child elements.
Transforming these props could be handled in the custom function, but the implementation details have been left out of this post.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;With this configuration, the Button component can now be written like this:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;const Button = (props) =&amp;gt; (
  &amp;lt;button {...props} /&amp;gt;
)
export default Button
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ve put up a rough demonstration of this concept, with the same two UI components being rendered to the DOM by
React, Preact, hyperscript, and bel here: &lt;a href=&quot;http://jxnblk.com/universal-components&quot; class=&quot;css-1o1roib&quot;&gt;Universal Components&lt;/a&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;With a little bit of configuration, a whole library of UI components could be written in a manner that would allow
the DOM rendering library to be swapped out at some point in the future,
without the need to use a tool like &lt;a href=&quot;https://github.com/facebook/codemod&quot; class=&quot;css-1o1roib&quot;&gt;Codemod&lt;/a&gt;.
There’s probably even a way to wrap components in an open-source library like &lt;a href=&quot;http://jxnblk.com/rebass&quot; class=&quot;css-1o1roib&quot;&gt;Rebass&lt;/a&gt;
to make them compatible with more than one functional DOM rendering library as well.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Unit testing UI]]></title><description><![CDATA[I recently read
 this excellent article ,
where the design team at Vox has devised a testing framework for new UI  components  introduced…]]></description><link>https://jxnblk.com/blog/unit-testing-ui/</link><guid isPermaLink="false">https://jxnblk.com/blog/unit-testing-ui/</guid><pubDate>Mon, 20 Jun 2016 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I recently read
&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://product.voxmedia.com/2016/4/20/11458814/how-designers-can-use-unit-testing-to-build-resilient-and-happy-design-systems&quot; class=&quot;css-1o1roib&quot;&gt;this excellent article&lt;/a&gt;,
where the design team at Vox has devised a testing framework for new UI &lt;a href=&quot;/blog/blog/posts/components&quot; class=&quot;css-1o1roib&quot;&gt;components&lt;/a&gt; introduced into their pattern library.
While the methods they suggest are excellent, and what I’d consider something that should be industry-standard in our field,
it got me thinking that this concept could be taken a step further.
What if designers wrote actual unit tests for UI components?
What if those tests were actually applied in user acceptance testing, A/B tests, and tested against performance metrics?&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;what-would-a-unit-test-look-like&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#what-would-a-unit-test-look-like&quot; class=&quot;css-1unrqcp&quot;&gt;What would a unit test look like?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;This is a really contrived example of what a UI unit test could look like:&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;css-h2uv5g&quot;&gt;describe: CTA button
  context: when a user sees the button
    expect: Users should know that the button is clickable
    expect: User should be able to click the button
    expect: Conversions should be above 4%
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Taking a cue from test driven development, these tests should be written before any design work is started, and they should &amp;quot;fail&amp;quot;  – because there’s no design yet.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Any work that follows should be towards making those tests pass.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;You might notice that this looks suspiciously like a &lt;a href=&quot;https://en.wikipedia.org/wiki/User_story&quot; class=&quot;css-1o1roib&quot;&gt;user story&lt;/a&gt;,
but I think this approach differs in a few ways.
First, user stories attempt to capture the &lt;em class=&quot;css-0&quot;&gt;how&lt;/em&gt; and &lt;em class=&quot;css-0&quot;&gt;why&lt;/em&gt; in addition to the &lt;em class=&quot;css-0&quot;&gt;what.&lt;/em&gt;
These unit tests only concern themselves with &lt;em class=&quot;css-0&quot;&gt;what&lt;/em&gt;.
Secondly, user stories are very much a part of Agile software development,
whereas these are simply meant to measure the design of UI components.&lt;/p&gt;&lt;h2 id=&quot;running-tests&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#running-tests&quot; class=&quot;css-1unrqcp&quot;&gt;“Running” tests&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Once you have a potential component, or even better, several potential components,
you’d be ready to start testing it against the unit tests previously written.
These tests shouldn’t overshadow the typical formats and methodologies of user testing, A/B testing, etc.
Instead, they should be used as an analytical tool to gauge the results.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If, when user testing a feature, the user doesn’t notice the button, there’s still more design work to do.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If, after ramping up a new button component, A/B testing shows that conversion is lower than expected, there’s still more work to do.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If users are bouncing at higher-than-anticipated rates because of slow page load, there’s still more work to be done.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Now, I will admit that design work is a lot less black and white than software development can be, and that it might be easy to shoot yourself in the foot with an approach like this. If, for example, conversion never gets above 3.9%, and you spend 2 weeks designing and redesigning a button, there are probably some other variables affecting things, and there are better ways to prioritize your time.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;But taking this idea as an approach to problem solving, gauging the efficacy of a design solution, and setting up goals for a product, I think it’s a concept worth exploring.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Components]]></title><description><![CDATA[Everything in a UI is a component.
This includes buttons, inputs, forms, promotional modules, pages, user flows, etc.
I use the word…]]></description><link>https://jxnblk.com/blog/components/</link><guid isPermaLink="false">https://jxnblk.com/blog/components/</guid><pubDate>Fri, 17 Jun 2016 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Everything in a UI is a component.
This includes buttons, inputs, forms, promotional modules, pages, user flows, etc.
I use the word &lt;em class=&quot;css-0&quot;&gt;component&lt;/em&gt; not only because this is how the underlying code is written in libraries like React and Ember,
but also because pieces of a well-designed UI system should be &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composability&quot; class=&quot;css-1o1roib&quot;&gt;composable&lt;/a&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;From the &lt;a href=&quot;https://en.wikipedia.org/wiki/Composability&quot; class=&quot;css-1o1roib&quot;&gt;Wikipedia page on Composability&lt;/a&gt;:&lt;/p&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A highly composable system provides recombinant components that can be selected and assembled in various combinations to satisfy specific user requirements. In information systems, the essential features that make a component composable are that it be:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;self-contained (modular): it can be deployed independently – note that it may cooperate with other components, but dependent components are replaceable&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;stateless: it treats each request as an independent transaction, unrelated to any previous request. Stateless is just one technique; managed state and transactional systems can also be composable, but with greater difficulty.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;modular--stateless-components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#modular--stateless-components&quot; class=&quot;css-1unrqcp&quot;&gt;Modular &amp;amp; Stateless Components&lt;/a&gt;&lt;/h2&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;css-h2uv5g&quot;&gt;state =&amp;gt; ui
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A UI system that is made up of independent stateless components is extremely flexible.
When individual pieces need to be swapped out or updated,
those changes are isolated and don’t cause other parts of a system to break.
Thinking about these components as being pure functions –
that is, the same state always produces the same output –
can help ensure composability.&lt;/p&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A pure function is one that exhibits the property of substitution: replacing a call with its returned value should make the program equivalent. As an example, &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;concat(&amp;#x27;hello&amp;#x27;, &amp;#x27;world&amp;#x27;)&lt;/code&gt; can be substituted with &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;#x27;hello world&amp;#x27;&lt;/code&gt; without changing the behavior of your program.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;How can we apply this to a graphical user interface? By having the function return an abstract representation of widgets (or markup) to be rendered on the screen...&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;– &lt;a href=&quot;http://rauchg.com/2015/pure-ui/&quot; class=&quot;css-1o1roib&quot;&gt;Pure UI by Guillermo Rauch&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;why-is-everything-a-component&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#why-is-everything-a-component&quot; class=&quot;css-1unrqcp&quot;&gt;Why is everything a “component?”&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Naming things is hard, there’s no debate there, but when you start to categorize different parts of a UI into pages, views, flows, atoms, molecules, materials, or kittens, you’ve already started to undermine the concept of composability, and it probably takes more time and effort to get an entire team of people to “agree upon” your proposed naming conventions than it’s worth.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The point of this is to think about everything as an interoperable system.
You can slice and dice components in any way you see fit, and these components are likely to change and be fine tuned as a system is developed.
Premature optimization is a trap that’s easy to fall into.
Embrace the chaos as you build.
Patterns will emerge from the primordial goop of UI that is your product,
and by consistently thinking about a composable system you’ll probably come up with something more flexible
and more robust than if one person dictates a dogmatic framework to work within.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Zero-Configuration React Static Site Generator]]></title><description><![CDATA[React is a great way to generate static HTML with a component-based UI.
One of the biggest hurdles to working with React is the amount of…]]></description><link>https://jxnblk.com/blog/zero-configuration-react-static-site-generator/</link><guid isPermaLink="false">https://jxnblk.com/blog/zero-configuration-react-static-site-generator/</guid><pubDate>Mon, 15 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;React is a great way to generate static HTML with a component-based UI.
One of the biggest hurdles to working with React is the amount of boilerplate and build configuration it takes to get going.
I wanted to make it dead-simple to start building static pages with React
and without the need to install tons of npm modules and configure webpack.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;That’s where &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://github.com/jxnblk/static-react&quot; class=&quot;css-1o1roib&quot;&gt;static-react&lt;/a&gt; comes in. Here’s out to get started.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;Update: As of version 3.2.0, static-react includes Babel presets and they do not need to be installed separately. This post has been updated to reflect those changes.&lt;/em&gt;&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;1-install-dependencies&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#1-install-dependencies&quot; class=&quot;css-1unrqcp&quot;&gt;1. Install Dependencies&lt;/a&gt;&lt;/h2&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-sh css-h2uv5g&quot;&gt;npm i -D react static-react
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;del&gt;The Babel presets are optional, but make working with React much nicer, in my opinion.&lt;/del&gt;&lt;/p&gt;&lt;h2 id=&quot;2-add-a-run-script&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#2-add-a-run-script&quot; class=&quot;css-1unrqcp&quot;&gt;2. Add a Run Script&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add the following run script to package.json.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-json css-h2uv5g&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;start&amp;quot;: &amp;quot;static-react components/Root.js &amp;gt; index.html&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-configure-babel-optional-&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#3-configure-babel-optional-&quot; class=&quot;css-1unrqcp&quot;&gt;&lt;del&gt;3. Configure Babel (Optional) &lt;a href=&quot;#1&quot; class=&quot;css-1o1roib&quot;&gt;*&lt;/a&gt;&lt;/del&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;del&gt;Add the following to package.json.&lt;/del&gt;&lt;/p&gt;&lt;h2 id=&quot;4-add-components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#4-add-components&quot; class=&quot;css-1unrqcp&quot;&gt;4. Add Components&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Create a &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;components&lt;/code&gt; directory and a &lt;code class=&quot;css-12ivgcj&quot;&gt;Root.js&lt;/code&gt; React component.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Root.js
import React from &amp;#x27;react&amp;#x27;

class Root extends React.Component {
  render () {
    return &amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;
  }
}

export default Root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;5-build&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#5-build&quot; class=&quot;css-1unrqcp&quot;&gt;5. Build&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-sh css-h2uv5g&quot;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Open &lt;code class=&quot;css-12ivgcj&quot;&gt;index.html&lt;/code&gt; and you should see the rendered Root component.&lt;/p&gt;&lt;h2 id=&quot;building-out-a-page&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#building-out-a-page&quot; class=&quot;css-1unrqcp&quot;&gt;Building Out a Page&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;You&amp;#x27;ll certainly want more than just a heading in the final page.
Build out some more components and run &lt;code class=&quot;css-12ivgcj&quot;&gt;npm start&lt;/code&gt; to rebuild.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Here is an example set of starter components:&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Root.js
import React from &amp;#x27;react&amp;#x27;
import Head from &amp;#x27;./Head&amp;#x27;
import Header from &amp;#x27;./Header&amp;#x27;
import Main from &amp;#x27;./Main&amp;#x27;
import Footer from &amp;#x27;./Footer&amp;#x27;

class Root extends React.Component {
  render () {
    return (
      &amp;lt;html&amp;gt;
        &amp;lt;Head title=&amp;#x27;Static React Demo&amp;#x27; /&amp;gt;
        &amp;lt;body className=&amp;#x27;px3&amp;#x27;&amp;gt;
          &amp;lt;Header title=&amp;#x27;Hello&amp;#x27; /&amp;gt;
          &amp;lt;Main /&amp;gt;
          &amp;lt;Footer /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    )
  }
}

export default Root
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Head.js
import React from &amp;#x27;react&amp;#x27;

const Head = ({ title }) =&amp;gt; (
  &amp;lt;head&amp;gt;
    &amp;lt;meta charSet=&amp;#x27;utf-8&amp;#x27; /&amp;gt;
    &amp;lt;title&amp;gt;{title}&amp;lt;/title&amp;gt;
    &amp;lt;link href=&amp;#x27;https://npmcdn.com/basscss-basic@1.0.0/index.css&amp;#x27; rel=&amp;#x27;stylesheet&amp;#x27; /&amp;gt;
    &amp;lt;link href=&amp;#x27;https://npmcdn.com/basscss@8.0.0/css/basscss.min.css&amp;#x27; rel=&amp;#x27;stylesheet&amp;#x27; /&amp;gt;
    &amp;lt;meta name=&amp;#x27;viewport&amp;#x27; content=&amp;#x27;width=device-width, initial-scale=1&amp;#x27; /&amp;gt;
  &amp;lt;/head&amp;gt;
)

export default Head
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Header.js
import React from &amp;#x27;react&amp;#x27;

const Header = ({ title }) =&amp;gt; (
  &amp;lt;header className=&amp;#x27;py3&amp;#x27;&amp;gt;
    &amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt;
  &amp;lt;/header&amp;gt;
)

export default Header
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Main.js
import React from &amp;#x27;react&amp;#x27;

const Main = () =&amp;gt; (
  &amp;lt;main className=&amp;#x27;py4&amp;#x27;&amp;gt;
    &amp;lt;img src=&amp;#x27;http://lorempixel.com/256/256/cats/&amp;#x27;
      alt=&amp;#x27;Kitten&amp;#x27; /&amp;gt;
  &amp;lt;/main&amp;gt;
)

export default Main
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Footer.js
import React from &amp;#x27;react&amp;#x27;

const Footer = () =&amp;gt; (
  &amp;lt;footer className=&amp;#x27;py3&amp;#x27;&amp;gt;
    &amp;lt;p&amp;gt;© 2016 Brent Jackson&amp;lt;/p&amp;gt;
  &amp;lt;/footer&amp;gt;
)

export default Footer
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you have any thoughts on or issues with the static-react module, please check out the repo on &lt;a href=&quot;https://github.com/jxnblk/static-react&quot; class=&quot;css-1o1roib&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p id=&quot;1&quot; class=&quot;mt3 italic css-1bl1570&quot;&gt;&lt;del&gt;* Technically, I guess this post should be titled &lt;b class=&quot;css-0&quot;&gt;Near-Zero-Configuration&lt;/b&gt;, but using Babel is completely optional.&lt;/del&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mathematical Web Typography]]></title><description><![CDATA[When it comes to designing for the Web
I like to follow a handful of general principles.
First, design for the medium, or as Frank Chimero…]]></description><link>https://jxnblk.com/blog/mathematical-web-typography/</link><guid isPermaLink="false">https://jxnblk.com/blog/mathematical-web-typography/</guid><pubDate>Tue, 23 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;When it comes to designing for the Web
I like to follow a handful of general principles.
First, design for the medium, or as Frank Chimero puts it,
follow &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://frankchimero.com/writing/the-webs-grain/&quot; class=&quot;css-1o1roib&quot;&gt;“the grain of the Web”&lt;/a&gt;.
The Web is fluid - based on screens and devices of varying sizes –
and typography on the Web should reflect that.
Second, design &lt;a href=&quot;http://alistapart.com/article/content-out-layout&quot; class=&quot;css-1o1roib&quot;&gt;content-out&lt;/a&gt;,
which usually means designing around a strong typographical base since the large majority of Web content and UI is text.
And last, design with &lt;a href=&quot;http://alistapart.com/article/more-meaningful-typography&quot; class=&quot;css-1o1roib&quot;&gt;modular scales&lt;/a&gt;.
Things built on the Web should be fluid and infinitely scalable.
Using modular scales in a design compliments that idea and keeps things organized in the face of growing complexity.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;handling-complexity&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#handling-complexity&quot; class=&quot;css-1unrqcp&quot;&gt;Handling Complexity&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Often when looking at how different sites have handled typography, I see similar problems arise.
Instead of sticking to a limited, modular scale, any one site might have hundreds of font sizes declared
and many more margin and padding declarations affecting the white space.
Instead of conforming to a common convention that could help users make sense of the underlying complexity,
these sites have added to the cognitive overhead with little to no benefit for the user.
In my experience, a page rarely needs more than six font sizes to effectively convey its information hierarchy,
and that’s exactly how many font sizes are provided with HTML headings.&lt;/p&gt;&lt;h2 id=&quot;context-specific-approaches&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#context-specific-approaches&quot; class=&quot;css-1unrqcp&quot;&gt;Context-Specific Approaches&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Instead of focusing on systems that enhance the content,
design solutions often focus on singular context-specific problems and introduce
&lt;a href=&quot;https://css-tricks.com/magic-numbers-in-css/&quot; class=&quot;css-1o1roib&quot;&gt;magic numbers&lt;/a&gt; that quickly grow out of hand.
These context-specific problems should inform the larger system, not break it.
While these one-off cases may seem harmless in isolation,
they often cause increasing complexity in a code base, and can lead to unintended side effects –
increasing technical debt and slowing down development speed.
While there may not be any one way to solve these problems,
many sites try to address them with a style guide and well-defined typographic systems.&lt;/p&gt;&lt;h2 id=&quot;screen-media&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#screen-media&quot; class=&quot;css-1unrqcp&quot;&gt;Screen Media&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Many typographic conventions have been around for centuries,
but most of that knowledge was based on technology that involved physical pieces of metal and paper media.
The majority of these conventions are still applicable on the Web,
but I also think that the different constraints and capabilities of screens warrant some new approaches.&lt;/p&gt;&lt;h2 id=&quot;start-with-the-defaults&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#start-with-the-defaults&quot; class=&quot;css-1unrqcp&quot;&gt;Start with the Defaults&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The browser defaults for font sizes provide a great starting point for developing a robust typographic system.
Since some of the values result in non-integer pixel values,
I tend to normalize and round the numbers to make them more scalable and easier to work with.&lt;/p&gt;&lt;style data-emotion-css=&quot;b9ooa2&quot;&gt;.css-b9ooa2{width:100%;margin-top:32px;margin-bottom:32px;border-collapse:separate;border-spacing:0;}&lt;/style&gt;&lt;table class=&quot;css-b9ooa2&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;style data-emotion-css=&quot;kej495&quot;&gt;.css-kej495{text-align:left;vertical-align:bottom;padding-top:4px;padding-bottom:4px;padding-right:4px;padding-left:0;border-color:inherit;border-bottom-width:2px;border-bottom-style:solid;}&lt;/style&gt;&lt;th class=&quot;css-kej495&quot;&gt;Default&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;Pixels&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;Normalized&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;Normalized Rem&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;style data-emotion-css=&quot;rbsv56&quot;&gt;.css-rbsv56{text-align:left;vertical-align:top;padding-top:4px;padding-bottom:4px;padding-right:4px;padding-left:0;border-color:inherit;border-bottom-width:1px;border-bottom-style:solid;}&lt;/style&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;0.67em&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;10.72px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;12px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;.75rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;0.83em&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;13.28px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;14px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;.875rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;inherit&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;16px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;16px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1.17em&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;18.72px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;20px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1.25rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1.5em&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;24px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;24px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1.5rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;2em&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;32px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;32px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;2rem&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;powers-of-two&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#powers-of-two&quot; class=&quot;css-1unrqcp&quot;&gt;Powers of Two&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Taking a look at the numbers used in screen-based media, there are a lot of powers of two.
The default font size for most browsers is 16px, which is 2&lt;sup&gt;4&lt;/sup&gt;.
Screens are digital media, and everything boils down to binary bits and bytes.
Because they are directly tied to graphics memory,
nearly all screen dimensions are based on sums of powers of two, and are often divisible by 16.
For example, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Graphics_display_resolution#XGA_.281024.C3.97768.29&quot; class=&quot;css-1o1roib&quot;&gt;XGA&lt;/a&gt;
display standard is 1024×768px, which converted to rems (or divided by 16) is 64×48rem.&lt;/p&gt;&lt;h2 id=&quot;modular-scales-and-factors&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#modular-scales-and-factors&quot; class=&quot;css-1unrqcp&quot;&gt;Modular Scales and Factors&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Working with numbers based on powers of two can result in an entire system of sensible numbers – often integers.
The normalized scale above starts with 16px (1rem) as a base, and multiplies each by specific factors to create integers.
Taking this normalized scale and setting a line-height of either 1.25 or 1.5 yields the following pixel values.&lt;/p&gt;&lt;table class=&quot;css-b9ooa2&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;th class=&quot;css-kej495&quot;&gt;Font Size&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;1.25 Line Height&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;1.5 Line Height&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;12px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;15px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;18px&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;14px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;17.5px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;21px&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;16px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;20px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;24px&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;20px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;25px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;30px&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;24px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;30px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;36px&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;32px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;40px&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;48px&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;These factors are all based on fractions with a power of two denominator – or based on halves and doubles.&lt;/p&gt;&lt;table class=&quot;css-b9ooa2&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;th class=&quot;css-kej495&quot;&gt;Fraction&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;Decimal&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1/2&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1/4&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;0.25&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1/8&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;0.125&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1/16&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;0.0625&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;This is similar to how units of time in Western music are divided.
While evolution gave us ten fingers, and base 10 number systems arised from that,
working with powers of two can be a more suitable convention for digital media.&lt;/p&gt;&lt;h2 id=&quot;1rem-as-a-base-unit&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#1rem-as-a-base-unit&quot; class=&quot;css-1unrqcp&quot;&gt;1rem as a Base Unit&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;When setting type, especially body copy, 1rem doesn’t always fit the content and the typeface used,
and it’s often desirable to use other font sizes.
Instead of altering the base font size and dealing with less-than-ideal numbers and complex calculations,
I keep 1rem as the default and derive all other typographic sizes from that base.
For example, setting body copy to 1.125rem (18px) and keeping other UI elements tied to the base 1rem
can make spacing and alignment adjustments much simpler and help create a natural rhythm in the visual design.&lt;/p&gt;&lt;h2 id=&quot;line-height&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#line-height&quot; class=&quot;css-1unrqcp&quot;&gt;Line Height&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In many stylesheets I see line-heights that are calculated as a quotient of the target line-height and the font size.
This sometimes leads to irrational, magic numbers that need to be rounded and can cause unforeseen and unintended consequences.&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-css css-h2uv5g&quot;&gt;/* Calculated from the target line-height */
.small-copy {
  font-size: 14px;
  line-height: 1.4285714; /* 20px, e.g. 20 divided by 14 */
}
.body-copy {
  font-size: 18px;
  line-height: 1.3888889; /* 25px, e.g. 25 divided by 18 */
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Not only do browsers handle subpixel rounding differently,
this can also cause issues when inheritance and scaling font sizes comes in to play,
which can lead to type scales with line heights coupled to each font size
and less DRY, less flexible code.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;On the other hand, keeping numbers tied to the same system yields interesting results.
The line heights below are computed to seemingly unrelated numbers: 21 and 27px.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-css css-h2uv5g&quot;&gt;/* Using 1rem as a base */
.small-copy {
  font-size: .875rem;
  line-height: 1.5; /* 21px */
}
.body-copy {
  font-size: 1.125rem;
  line-height: 1.5; /* 27px */
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The sum of the font sizes .875rem and 1.125rem is 2rem,
and the sum of these two line heights is 48px,
which is the same line height for 32px type when set to 1.5.
Although it might not seem like much,
using this approach across an entire typographic system
can create many subtle relationships among different parts of the design.&lt;/p&gt;&lt;h2 id=&quot;white-space&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#white-space&quot; class=&quot;css-1unrqcp&quot;&gt;White Space&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Font sizes and line heights are only parts of a typographic system.
The white space between headings, paragraphs, and other elements plays a crucial part
in creating typographic color and visual rhythm.
For many of the same reasons listed above, and to stick to a content-out approach,
I tend to base margin and padding values on numbers derived from the same typographic system
and use a modular scale.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For example, &lt;a href=&quot;http://basscss.com&quot; class=&quot;css-1o1roib&quot;&gt;Basscss&lt;/a&gt; uses the following scale for margin and padding declarations.&lt;/p&gt;&lt;table class=&quot;css-b9ooa2&quot;&gt;&lt;thead&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;th class=&quot;css-kej495&quot;&gt;Step&lt;/th&gt;&lt;th class=&quot;css-kej495&quot;&gt;Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;.5rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;1rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;3&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;2rem&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;css-0&quot;&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;4&lt;/td&gt;&lt;td class=&quot;css-rbsv56&quot;&gt;4rem&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Each one of these values can be derived from either halving or doubling the 1rem base
and is related to the other values used for typography.&lt;/p&gt;&lt;h2 id=&quot;building-better-systems&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#building-better-systems&quot; class=&quot;css-1unrqcp&quot;&gt;Building Better Systems&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;This is just one approach to creating modular typographic systems on the Web
and only scratches the surface on some of the underlying details.
Hopefully this can help inform building more robust,
fault tolerant design systems that
promote consistency, reduce technical debt,
and make designing and developing for the Web more efficient and more enjoyable.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mini MacBook Review]]></title><description><![CDATA[Why the new MacBook might just be my favorite computer ever]]></description><link>https://jxnblk.com/blog/mini-macbook-review/</link><guid isPermaLink="false">https://jxnblk.com/blog/mini-macbook-review/</guid><pubDate>Wed, 17 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;size&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#size&quot; class=&quot;css-1unrqcp&quot;&gt;Size&lt;/a&gt;&lt;/h2&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Fits in my pocket.&lt;/p&gt;&lt;h2 id=&quot;screen&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#screen&quot; class=&quot;css-1unrqcp&quot;&gt;Screen&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Super sharp.&lt;/p&gt;&lt;h2 id=&quot;keyboard&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#keyboard&quot; class=&quot;css-1unrqcp&quot;&gt;Keyboard&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Sounds great. &lt;em class=&quot;css-0&quot;&gt;pok pok pok pok pok&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;trackpad&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#trackpad&quot; class=&quot;css-1unrqcp&quot;&gt;Trackpad&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Clicks and clicks again, but doesn’t really click.&lt;/p&gt;&lt;h2 id=&quot;ports&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#ports&quot; class=&quot;css-1unrqcp&quot;&gt;Ports&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Power: check. Beats: check.&lt;/p&gt;&lt;h2 id=&quot;performance&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#performance&quot; class=&quot;css-1unrqcp&quot;&gt;Performance&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Runs Vim like a champ.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Color Palette Documentation for Living Style Guides]]></title><description><![CDATA[Virtually every style guide has a color palette section in its documentation.
Many times I’ve seen this documentation created manually…]]></description><link>https://jxnblk.com/blog/color-palette-documentation-for-living-style-guides/</link><guid isPermaLink="false">https://jxnblk.com/blog/color-palette-documentation-for-living-style-guides/</guid><pubDate>Mon, 15 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Virtually every style guide has a color palette section in its documentation.
Many times I’ve seen this documentation created manually, where every change to a color requires updating the values in two places – the stylesheet and the style guide.
This often leads to one falling out of sync with the other,
and makes maintaining a living style guide more difficult.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The problem with this approach is that the values are being defined in two different places.
For a true living style guide, the code should serve as the single source of truth.
Extracting color values from CSS can help keep documentation in sync,
expose outdated colors, and point out opportunities for normalizing designs.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The following will show how to use Node.js to build source-code-derived documentation for color palettes
and present color contrast values for each possible pairing as a guide for usage.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;initial-setup&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#initial-setup&quot; class=&quot;css-1unrqcp&quot;&gt;Initial Setup&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you’re already using Node.js in your build system,
you can integrate this directly into your project.
For the purposes of this tutorial, create a new sandboxed project to experiment with.&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;mkdir color-documentation
cd color-documentation
npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Install the following modules.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;npm i --save-dev postcss color colorable lodash
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://github.com/postcss/postcss&quot; class=&quot;css-1o1roib&quot;&gt;PostCSS&lt;/a&gt; module will be used to transform the source CSS into an
&lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot; class=&quot;css-1o1roib&quot;&gt;&lt;abbr title=&quot;Abstract Syntax Tree&quot;&gt;AST&lt;/abbr&gt;&lt;/a&gt;
for manipulation with JavaScript.
&lt;a href=&quot;https://www.npmjs.com/package/color&quot; class=&quot;css-1o1roib&quot;&gt;Color&lt;/a&gt; will be used to convert the values found in the stylesheet to hexidecimal.
&lt;a href=&quot;http://jxnblk.com/colorable&quot; class=&quot;css-1o1roib&quot;&gt;Colorable&lt;/a&gt; will be used to get color contrast values and
&lt;a href=&quot;http://www.w3.org/TR/WCAG20/#visual-audio-contrast&quot; class=&quot;css-1o1roib&quot;&gt;WCAG&lt;/a&gt;
scores for every possible pairing of colors.
And &lt;a href=&quot;https://lodash.com/docs&quot; class=&quot;css-1o1roib&quot;&gt;lodash&lt;/a&gt; will be used to find unique color values and
to render templates to HTML.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Copy a CSS file into the project to use as a source for the color values.
This tutorial will use &lt;a href=&quot;http://www.basscss.com/docs/&quot; class=&quot;css-1o1roib&quot;&gt;Basscss&lt;/a&gt; as an example.&lt;/p&gt;&lt;h2 id=&quot;build-script&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#build-script&quot; class=&quot;css-1unrqcp&quot;&gt;Build Script&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Create a new &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;build.js&lt;/code&gt; file that will be used to read the CSS file and eventually to generate an HTML page.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// build.js
var fs = require(&amp;#x27;fs&amp;#x27;)

// Read the contents of basscss.css
var css = fs.readFileSync(&amp;#x27;basscss.css&amp;#x27;, &amp;#x27;utf8&amp;#x27;)

console.log(css)
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For now, this script just logs the stylesheet.&lt;/p&gt;&lt;h2 id=&quot;package-scripts&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#package-scripts&quot; class=&quot;css-1unrqcp&quot;&gt;Package Scripts&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add a script to &lt;code class=&quot;css-12ivgcj&quot;&gt;package.json&lt;/code&gt; for the build script.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-json css-h2uv5g&quot;&gt;// package.json
&amp;quot;scripts&amp;quot;: {
  &amp;quot;start&amp;quot;: &amp;quot;node build&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Run the script to make sure everything is working.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;parsing-css&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#parsing-css&quot; class=&quot;css-1unrqcp&quot;&gt;Parsing CSS&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Create a new &lt;code class=&quot;css-12ivgcj&quot;&gt;lib/parse-colors.js&lt;/code&gt; file for parsing the CSS.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// lib/parse-colors.js
var _ = require(&amp;#x27;lodash&amp;#x27;)
var postcss = require(&amp;#x27;postcss&amp;#x27;)
var Color = require(&amp;#x27;color&amp;#x27;)

module.exports = function(css) {
  // Array of colors to return
  var colors = []

  // Parse the CSS file and get the AST
  var root = postcss.parse(css)

  // Iterate through each declaration and log the property
  root.eachDecl(function(decl) {
    console.log(decl.prop)
  })

  return colors
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Use this module in &lt;code class=&quot;css-12ivgcj&quot;&gt;build.js&lt;/code&gt;.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// build.js
var fs = require(&amp;#x27;fs&amp;#x27;)
var parseColors = require(&amp;#x27;./lib/parse-colors&amp;#x27;)

// Read the contents of basscss.css
var css = fs.readFileSync(&amp;#x27;basscss.css&amp;#x27;, &amp;#x27;utf8&amp;#x27;)
var colors = parseColors(css)
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;code class=&quot;css-12ivgcj&quot;&gt;parse-colors&lt;/code&gt; module takes raw CSS and transforms it into an AST that can be iterated over.
For now, this just logs all the properties found in the stylesheet.&lt;/p&gt;&lt;h2 id=&quot;filtering-colors&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#filtering-colors&quot; class=&quot;css-1unrqcp&quot;&gt;Filtering Colors&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Next update the parse module to filter out everything but &lt;code class=&quot;css-12ivgcj&quot;&gt;color&lt;/code&gt; and &lt;code class=&quot;css-12ivgcj&quot;&gt;background-color&lt;/code&gt; properties,
convert the values to hex, and remove duplicates.
While color values can be used in other properties including the &lt;code class=&quot;css-12ivgcj&quot;&gt;background&lt;/code&gt; shorthand,
handling that would add complexity and will be omitted from this tutorial.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// lib/parse-colors.js
var _ = require(&amp;#x27;lodash&amp;#x27;)
var postcss = require(&amp;#x27;postcss&amp;#x27;)
var Color = require(&amp;#x27;color&amp;#x27;)

module.exports = function(css) {

  var colors = []
  var root = postcss.parse(css)

  // Iterate through each color and background-color declaration
  root.eachDecl(/(color|background\-color)/, function(decl) {
    // Add each color value to the colors array
    colors.push(decl.value)
  })

  // Convert all color values to hex strings
  colors = colors.map(function(color) {
    var hex
    try {
      hex = Color(color).hexString()
      return hex
    } catch(e) {
      // Handle color values like inherit and currentcolor
      return false
    }
  })
  .filter(function(value) {
    // Remove false values
    return value
  })

  // Remove duplicate values
  colors = _.uniq(colors)

  return colors

}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The first argument in &lt;code class=&quot;css-12ivgcj&quot;&gt;root.eachDecl&lt;/code&gt; is a regular expression to filter declarations for either &lt;code class=&quot;css-12ivgcj&quot;&gt;color&lt;/code&gt; or &lt;code class=&quot;css-12ivgcj&quot;&gt;background-color&lt;/code&gt;.
See the &lt;a href=&quot;https://github.com/postcss/postcss/blob/master/docs/api.md#containereachdeclpropfilter-callback&quot; class=&quot;css-1o1roib&quot;&gt;PostCSS documentation&lt;/a&gt; for more details.
The &lt;code class=&quot;css-12ivgcj&quot;&gt;Color().hexString()&lt;/code&gt; method converts any valid color value to hex format. The lodash &lt;code class=&quot;css-12ivgcj&quot;&gt;_.uniq&lt;/code&gt; method removes duplicate values from an array.&lt;/p&gt;&lt;h2 id=&quot;html-template&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#html-template&quot; class=&quot;css-1unrqcp&quot;&gt;HTML Template&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Next, create a &lt;code class=&quot;css-12ivgcj&quot;&gt;template.html&lt;/code&gt; file for displaying the colors.
This tutorial uses lodash templates, but any JavaScript templating language would work.
Note: if you’re using a stylesheet other than Basscss, the classes applied below may differ.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-html css-h2uv5g&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!-- template.html --&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Color Palette Docs Demo&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;basscss.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body class=&amp;quot;px3&amp;quot;&amp;gt;
  &amp;lt;header class=&amp;quot;py3&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;Color Palette Docs Demo&amp;lt;/h1&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;ul class=&amp;quot;list-reset flex flex-wrap flex-justify mxn2&amp;quot;&amp;gt;
    &amp;lt;% colors.map(renderColor) %&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;% function renderColor(color) { %&amp;gt;
    &amp;lt;li class=&amp;quot;m2&amp;quot;&amp;gt;
      &amp;lt;div style=&amp;quot;background-color:&amp;lt;%= color %&amp;gt;&amp;quot;
        class=&amp;quot;p4&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;%= color %&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% } %&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Inside the &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; the &lt;code class=&quot;css-12ivgcj&quot;&gt;.map()&lt;/code&gt; method is used to iterate over the &lt;code class=&quot;css-12ivgcj&quot;&gt;colors&lt;/code&gt; array and passes the &lt;code class=&quot;css-12ivgcj&quot;&gt;renderColor&lt;/code&gt; function as a callback.
The &lt;code class=&quot;css-12ivgcj&quot;&gt;renderColor&lt;/code&gt; function then renders an &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each color with a div that has its background color set to that value.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Edit &lt;code class=&quot;css-12ivgcj&quot;&gt;build.js&lt;/code&gt; to read the template and generate an HTML file.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// build.js
var _ = require(&amp;#x27;lodash&amp;#x27;)
var fs = require(&amp;#x27;fs&amp;#x27;)
var parseColors = require(&amp;#x27;./lib/parse-colors&amp;#x27;)

var css = fs.readFileSync(&amp;#x27;basscss.css&amp;#x27;, &amp;#x27;utf8&amp;#x27;)
// Read the template string
var template = fs.readFileSync(&amp;#x27;template.html&amp;#x27;, &amp;#x27;utf8&amp;#x27;)
// Create a lodash template function
var tpl = _.template(template)
var colors = parseColors(css)

// Render the template function to an HTML string
var html = tpl({ colors: colors })

// Write an HTML file to disk
fs.writeFileSync(&amp;#x27;index.html&amp;#x27;, html)
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Now run &lt;code class=&quot;css-12ivgcj&quot;&gt;npm start&lt;/code&gt; which should generate an HTML file with the colors parsed from the stylesheet.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;npm start &amp;amp;&amp;amp; open index.html
&lt;/code&gt;&lt;/pre&gt;&lt;style data-emotion-css=&quot;1a2v9hb&quot;&gt;.css-1a2v9hb{max-width:100%;height:auto;}&lt;/style&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/css-color-palette.png&quot; alt=&quot;Color palette demo&quot; width=&quot;768&quot; height=&quot;496&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;h2 id=&quot;readable-color-combinations&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#readable-color-combinations&quot; class=&quot;css-1unrqcp&quot;&gt;Readable Color Combinations&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The Colorable module takes an array of colors and returns a nested array of color combinations, along with their contrast values to test for readability. This can be useful for seeing what foreground-background pairs can and can’t be used for text.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Create a new &lt;code class=&quot;css-12ivgcj&quot;&gt;lib/parse-combos.js&lt;/code&gt; file.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// lib/parse-combos.js
var colorable = require(&amp;#x27;colorable&amp;#x27;)

module.exports = function(colors) {

  var combos = []
  // Get the Colorable array
  var arr = colorable(colors)

  // Flatten the array and combine the foreground and background colors
  arr.forEach(function(color) {
    var pairing = color.hex
    color.combinations.forEach(function(combo) {
      combo.pairing = pairing
      combos.push(combo)
    })
  })

  // Sort the array by contrast from high to low
  combos.sort(function(a, b) {
    return b.contrast - a.contrast
  })

  return combos

}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add the &lt;code class=&quot;css-12ivgcj&quot;&gt;parse-combos&lt;/code&gt; module to &lt;code class=&quot;css-12ivgcj&quot;&gt;build.js&lt;/code&gt; and pass the combos array into the template function.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// build.js
var _ = require(&amp;#x27;lodash&amp;#x27;)
var fs = require(&amp;#x27;fs&amp;#x27;)
var parseColors = require(&amp;#x27;./lib/parse-colors&amp;#x27;)
var parseCombos = require(&amp;#x27;./lib/parse-combos&amp;#x27;)

var css = fs.readFileSync(&amp;#x27;basscss.css&amp;#x27;, &amp;#x27;utf8&amp;#x27;)
var template = fs.readFileSync(&amp;#x27;template.html&amp;#x27;, &amp;#x27;utf8&amp;#x27;)
var tpl = _.template(template)
var colors = parseColors(css)
var combos = parseCombos(colors)

var html = tpl({
  colors: colors,
  combos: combos
})
fs.writeFileSync(&amp;#x27;index.html&amp;#x27;, html)
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add a section to &lt;code class=&quot;css-12ivgcj&quot;&gt;template.html&lt;/code&gt; to display the color combinations.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-html css-h2uv5g&quot;&gt;  &amp;lt;h2&amp;gt;Combinations&amp;lt;/h2&amp;gt;
  &amp;lt;ul class=&amp;quot;list-reset flex flex-wrap&amp;quot;&amp;gt;
    &amp;lt;% combos.map(renderCombo) %&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;% function renderCombo(combo) { %&amp;gt;
    &amp;lt;li class=&amp;quot;py2 col-6 sm-col-4 md-col-3 lg-col-2&amp;quot;
      style=&amp;quot;color:&amp;lt;%= combo.pairing %&amp;gt;;background-color:&amp;lt;%= combo.hex %&amp;gt;&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;h1 bold px2&amp;quot;&amp;gt;
        Aa
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;h5 px2&amp;quot;&amp;gt;
        &amp;lt;%= combo.pairing %&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;%= combo.hex %&amp;gt;
        &amp;lt;br&amp;gt;
        &amp;lt;%= combo.contrast.toFixed(2) %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Run the build script. You should now have a list of color combinations along with the contrast value for each pair.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/css-color-combos.jpg&quot; alt=&quot;Color combination demo&quot; width=&quot;768&quot; height=&quot;576&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While seeing combinations that don’t have high enough contrast might be useful,
for this tutorial set Colorable’s &lt;code class=&quot;css-12ivgcj&quot;&gt;threshold&lt;/code&gt; option to 3
to only show combinations that pass the WCAG minimum for large text.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// lib/parse-combos.js
  // ...
  var combos = []
  var arr = colorable(colors, { threshold: 3 })
  // ...
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Run the build script again. Now you should only see color combinations with a contrast value of 3 or above.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;At this point, feel free to edit the styles of the rendered template and explore different ways of showing this information.
You can also swap &lt;code class=&quot;css-12ivgcj&quot;&gt;basscss.css&lt;/code&gt; out for another framework or stylesheet to test things out.&lt;/p&gt;&lt;h2 id=&quot;expanding-upon-this-idea&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#expanding-upon-this-idea&quot; class=&quot;css-1unrqcp&quot;&gt;Expanding Upon This Idea&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In addition to displaying raw color values and contrast ratios,
other aspects of color can be extracted from a stylesheet,
such as the selectors used for each color or the number of times each color is used in a stylesheet.
You could also show colors sorted by similarity to help expose
inconsistencies and opportunities to normalize the design.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While this is not a complete replacement for human written documentation,
and creating guidelines around color usage requires carefully considered writing,
using automated tooling to generate source-code-derived documentation
for things like color values can help create better living style guides.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Static Site Generation with React and Webpack]]></title><description><![CDATA[I’ve been dabbling with React for a few months now and using it in several small open source projects
to better understand the technology…]]></description><link>https://jxnblk.com/blog/static-site-generation-with-react-and-webpack/</link><guid isPermaLink="false">https://jxnblk.com/blog/static-site-generation-with-react-and-webpack/</guid><pubDate>Sat, 06 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ve been dabbling with React for a few months now and using it in several small open source projects
to better understand the technology.
React’s focus on reusablility, along with the ability to install and require components via npm,
provides an elegant way to rapidly build application UI in an efficient and consistent way.
It’s also a great way to handle server-side rendering and provides high cohesion between markup and display logic.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;Note: many of the packages referenced in this post have released major version, breaking updates since this was written. Some of the examples may not work with the latest npm modules, especially the react-router package, which has a much different API now.&lt;/strong&gt;&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;why&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#why&quot; class=&quot;css-1unrqcp&quot;&gt;Why&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;React is incredibly intuitive and flexible to work with,
but relying solely on client side rendering
leaves a lot to be desired in regards to percieved performance.
With a static React site, the page loads just like any other static HTML,
and the JavaScript kicks in whenever it’s downloaded.
This is extremely helpful for combining documentation with interactive demonstrations,
like &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://jxnblk.com/colorable&quot; class=&quot;css-1o1roib&quot;&gt;Colorable&lt;/a&gt; or &lt;a href=&quot;http://jxnblk.com/react-icons&quot; class=&quot;css-1o1roib&quot;&gt;Building SVG Icons with React&lt;/a&gt;.
Using React with webpack also allows you to consolidate the entire build process
in Node and take advantage of anything in the npm ecosystem.
Last but not least, React is just fun to use.&lt;/p&gt;&lt;h2 id=&quot;how&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#how&quot; class=&quot;css-1unrqcp&quot;&gt;How&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Although there are several ways to render static sites with React,
the following is what I’ve found to be easiest.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;First start a fresh project and initialize npm.&lt;/p&gt;&lt;style data-emotion-css=&quot;4dinw3&quot;&gt;.css-4dinw3{font-family:Menlo,monospace;padding:16px;color:#228;background-color:#f9faff;border-radius:4px;overflow-x:auto;}&lt;/style&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;style data-emotion-css=&quot;h2uv5g&quot;&gt;.css-h2uv5g{font-family:Menlo,monospace;}&lt;/style&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;mkdir react-static-site
cd react-static-site
npm init
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Install the following modules.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;npm i --save-dev react webpack webpack-dev-server jsx-loader static-site-generator-webpack-plugin react-router
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;Webpack&lt;/a&gt; and webpack-dev-server will be used for the entire build process and can also handle assets such as CSS, images, and fonts.
The jsx-loader is used to transpile imported jsx files. If you prefer ES6, you can use babel-loader instead of jsx-loader.
The &lt;a href=&quot;https://github.com/markdalgleish/static-site-generator-webpack-plugin&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;static-site-generator-webpack-plugin&lt;/a&gt; module is what is used to generate static HTML.
And &lt;a href=&quot;http://rackt.github.io/react-router/&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;React Router&lt;/a&gt; is used to handle routing. For single page static sites, React Router is not needed.&lt;/p&gt;&lt;h2 id=&quot;set-up-webpack&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#set-up-webpack&quot; class=&quot;css-1unrqcp&quot;&gt;Set up Webpack&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Webpack is a module bundler similar to Browserify, but can also replace front-end build systems like Grunt and Gulp.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;First off, you’ll need a &lt;style data-emotion-css=&quot;12ivgcj&quot;&gt;.css-12ivgcj{font-family:Menlo,monospace;color:#228;background-color:#f9faff;font-size:87.5%;}&lt;/style&gt;&lt;code class=&quot;css-12ivgcj&quot;&gt;webpack.config.js&lt;/code&gt; file. The webpack command line interface will use this config file.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// webpack.config.js
var StaticSiteGeneratorPlugin = require(&amp;#x27;static-site-generator-webpack-plugin&amp;#x27;)
var data = require(&amp;#x27;./data&amp;#x27;)

module.exports = {
  entry: &amp;#x27;./entry.js&amp;#x27;,

  output: {
    filename: &amp;#x27;bundle.js&amp;#x27;,
    path: __dirname,
    libraryTarget: &amp;#x27;umd&amp;#x27;
  },

  module: {
    loaders: [
      { test: /\.jsx$/, loader: &amp;#x27;jsx-loader&amp;#x27; }
    ]
  },

  plugins: [
    new StaticSiteGeneratorPlugin(&amp;#x27;bundle.js&amp;#x27;, data.routes, data)
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-an-entry-file&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#create-an-entry-file&quot; class=&quot;css-1unrqcp&quot;&gt;Create an Entry File&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The entry file is what webpack will read to build &lt;code class=&quot;css-12ivgcj&quot;&gt;bundle.js&lt;/code&gt;,
and the static-site-generator-webpack-plugin uses the bundle to generate HTML.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For a single rendered page, you can skip React Router and create an &lt;code class=&quot;css-12ivgcj&quot;&gt;entry.js&lt;/code&gt; file like the following.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// entry.js with no routing
var React = require(&amp;#x27;react&amp;#x27;)
var Root = require(&amp;#x27;./components/Root.jsx&amp;#x27;)

module.exports = function render(locals, callback) {
  var html = React.renderToStaticMarkup(React.createElement(Root, locals))
  callback(null, &amp;#x27;&amp;lt;!DOCTYPE html&amp;gt;&amp;#x27; + html)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For handling multiple routes, update the entry file using React Router and create a &lt;code class=&quot;css-12ivgcj&quot;&gt;Routes.jsx&lt;/code&gt; file.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// entry.js
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var Routes = require(&amp;#x27;./Routes.jsx&amp;#x27;)

module.exports = function render(locals, callback) {
  Router.run(Routes, locals.path, function (Handler) {
    var html = React.renderToStaticMarkup(React.createElement(Handler, locals))
    callback(null, &amp;#x27;&amp;lt;!DOCTYPE html&amp;gt;&amp;#x27; + html)
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Routes.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var Route = Router.Route
var DefaultRoute = Router.DefaultRoute
var Root = require(&amp;#x27;./components/Root.jsx&amp;#x27;)
var Index = require(&amp;#x27;./components/Index.jsx&amp;#x27;)

var Routes = (
  &amp;lt;Route handler={Root} path=&amp;#x27;/&amp;#x27;&amp;gt;
    &amp;lt;DefaultRoute handler={Index} /&amp;gt;
  &amp;lt;/Route&amp;gt;
)

module.exports = Routes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-a-data-file&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#create-a-data-file&quot; class=&quot;css-1unrqcp&quot;&gt;Create a Data File&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Next create a &lt;code class=&quot;css-12ivgcj&quot;&gt;data.js&lt;/code&gt; file that will include initial props passed to the Root component and routes used for the router.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// data.js
module.exports = {
  title: &amp;#x27;My Static Site&amp;#x27;,
  routes: [
    &amp;#x27;/&amp;#x27;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-rootjsx&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#create-rootjsx&quot; class=&quot;css-1unrqcp&quot;&gt;Create Root.jsx&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The Root component will include the &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and other code that will be shared across all pages.
The page components themselves will be passed through the &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;RouteHander&amp;gt;&lt;/code&gt; component with React Router.
To keep things somewhat organized, create this file in a new &lt;code class=&quot;css-12ivgcj&quot;&gt;components&lt;/code&gt; directory.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Root.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var RouteHandler = Router.RouteHandler

var Root = React.createClass({
  render: function () {
    return (
      &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;{this.props.title}&amp;lt;/title&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;RouteHandler {...this.props} /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    )
  }
})

module.exports = Root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-indexjsx&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#create-indexjsx&quot; class=&quot;css-1unrqcp&quot;&gt;Create Index.jsx&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The Index component will be the page rendered with &lt;code class=&quot;css-12ivgcj&quot;&gt;&amp;lt;DefaultRoute&amp;gt;&lt;/code&gt; and should contain the content for the root &lt;code class=&quot;css-12ivgcj&quot;&gt;index.html&lt;/code&gt; file.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Index.jsx
var React = require(&amp;#x27;react&amp;#x27;)

var Index = React.createClass({
  render: function () {
    return (
      &amp;lt;main&amp;gt;
        Index component
      &amp;lt;/main&amp;gt;
    )
  }
})

module.exports = Index
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;package-scripts&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#package-scripts&quot; class=&quot;css-1unrqcp&quot;&gt;Package Scripts&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add the following scripts to &lt;code class=&quot;css-12ivgcj&quot;&gt;package.json&lt;/code&gt; to run webpack.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-json css-h2uv5g&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;webpack&amp;quot;: &amp;quot;webpack --progress --colors&amp;quot;,
  &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --progress --colors&amp;quot;,
  &amp;quot;start&amp;quot;: &amp;quot;npm run dev&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Run the start script to start a development server.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Open &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;css-1o1roib&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/a&gt; in a browser.
You should see an unstyled page with the words &lt;em class=&quot;css-0&quot;&gt;Index component&lt;/em&gt;.&lt;/p&gt;&lt;h2 id=&quot;adding-pages&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#adding-pages&quot; class=&quot;css-1unrqcp&quot;&gt;Adding Pages&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Next, add a new route for an &lt;em class=&quot;css-0&quot;&gt;about&lt;/em&gt; page.
In &lt;code class=&quot;css-12ivgcj&quot;&gt;data.js&lt;/code&gt; add &lt;code class=&quot;css-12ivgcj&quot;&gt;/about&lt;/code&gt; to the routes array.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// data.js
module.exports = {
  title: &amp;#x27;My Static Site&amp;#x27;,
  routes: [
    &amp;#x27;/&amp;#x27;,
    &amp;#x27;/about&amp;#x27;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Edit the &lt;code class=&quot;css-12ivgcj&quot;&gt;Routes.jsx&lt;/code&gt; file to handle the new route.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// Routes.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var Route = Router.Route
var DefaultRoute = Router.DefaultRoute
var Root = require(&amp;#x27;./components/Root.jsx&amp;#x27;)
var Index = require(&amp;#x27;./components/Index.jsx&amp;#x27;)
var About = require(&amp;#x27;./components/About.jsx&amp;#x27;)

var Routes = (
  &amp;lt;Route handler={Root} path=&amp;#x27;/&amp;#x27;&amp;gt;
    &amp;lt;DefaultRoute handler={Index} /&amp;gt;
    &amp;lt;Route path=&amp;#x27;/about&amp;#x27; handler={About} /&amp;gt;
  &amp;lt;/Route&amp;gt;
)

module.exports = Routes
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Create a new &lt;code class=&quot;css-12ivgcj&quot;&gt;About.jsx&lt;/code&gt; component.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/About.jsx
var React = require(&amp;#x27;react&amp;#x27;)

var About = React.createClass({
  render: function () {
    return (
      &amp;lt;main&amp;gt;
        About component
      &amp;lt;/main&amp;gt;
    )
  }
})

module.exports = About
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Stop and restart the development server and navigate to
&lt;a href=&quot;http://localhost:8080/about&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;&lt;a href=&quot;http://localhost:8080/about&quot; class=&quot;css-1o1roib&quot;&gt;http://localhost:8080/about&lt;/a&gt;&lt;/a&gt;.
You should see a page similar to the index but with the words &lt;em class=&quot;css-0&quot;&gt;About component&lt;/em&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;React-router can also handle route params such as &lt;code class=&quot;css-12ivgcj&quot;&gt;posts/:id&lt;/code&gt; for dynamic routing –
&lt;a href=&quot;http://rackt.github.io/react-router/&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;View the docs&lt;/a&gt; to learn more.&lt;/p&gt;&lt;h2 id=&quot;render-to-static-markup&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#render-to-static-markup&quot; class=&quot;css-1unrqcp&quot;&gt;Render to Static Markup&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Stop the development server and run &lt;code class=&quot;css-12ivgcj&quot;&gt;npm run webpack&lt;/code&gt;. This should generate two static &lt;code class=&quot;css-12ivgcj&quot;&gt;index.html&lt;/code&gt; files in the root and &lt;code class=&quot;css-12ivgcj&quot;&gt;about&lt;/code&gt; directories.&lt;/p&gt;&lt;h2 id=&quot;adding-client-side-js&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#adding-client-side-js&quot; class=&quot;css-1unrqcp&quot;&gt;Adding Client-Side JS&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In order to use React for client side JavaScript, you’ll need to ensure that the props match up between the static page and the bundle.js file.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;First, edit &lt;code class=&quot;css-12ivgcj&quot;&gt;entry.js&lt;/code&gt; to change the render function
from &lt;code class=&quot;css-12ivgcj&quot;&gt;React.renderToStaticMarkup&lt;/code&gt; to &lt;code class=&quot;css-12ivgcj&quot;&gt;React.renderToString&lt;/code&gt;
and add a conditional block that will only run client-side.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// entry.js
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var Routes = require(&amp;#x27;./Routes.jsx&amp;#x27;)

if (typeof document !== &amp;#x27;undefined&amp;#x27;) {
  var initialProps = JSON.parse(document.getElementById(&amp;#x27;initial-props&amp;#x27;).innerHTML)
  Router.run(Routes, Router.HistoryLocation, function (Handler) {
    React.render(React.createElement(Handler, initialProps), document)
  })
}

module.exports = function render(locals, callback) {
  Router.run(Routes, locals.path, function (Handler) {
    var html = React.renderToString(React.createElement(Handler, locals))
    callback(null, &amp;#x27;&amp;lt;!DOCTYPE html&amp;gt;&amp;#x27; + html)
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;code class=&quot;css-12ivgcj&quot;&gt;initialProps&lt;/code&gt; value will come from a script tag with the id &lt;code class=&quot;css-12ivgcj&quot;&gt;initial-props&lt;/code&gt;.
Update the Root component to add this script tag, add a &lt;code class=&quot;css-12ivgcj&quot;&gt;safeStringify&lt;/code&gt; function, and link to the &lt;code class=&quot;css-12ivgcj&quot;&gt;bundle.js&lt;/code&gt; file.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Root.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var RouteHandler = Router.RouteHandler

var Root = React.createClass({
  render: function () {
    var initialProps = {
      __html: safeStringify(this.props)
    }

    return (
      &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;{this.props.title}&amp;lt;/title&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;RouteHandler {...this.props} /&amp;gt;
          &amp;lt;script
            id=&amp;#x27;initial-props&amp;#x27;
            type=&amp;#x27;application/json&amp;#x27;
            dangerouslySetInnerHTML={initialProps} /&amp;gt;
          &amp;lt;script src=&amp;#x27;bundle.js&amp;#x27; /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    )
  }
})

function safeStringify(obj) {
  return JSON.stringify(obj).replace(/&amp;lt;\/script/g, &amp;#x27;&amp;lt;\\/script&amp;#x27;).replace(/&amp;lt;!--/g, &amp;#x27;&amp;lt;\\!--&amp;#x27;)
}

module.exports = Root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;navigation-links&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#navigation-links&quot; class=&quot;css-1unrqcp&quot;&gt;Navigation Links&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To link the pages together, create a new Header component.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Header.jsx
var React = require(&amp;#x27;react&amp;#x27;)

var Header = React.createClass({
  render: function () {
    return (
      &amp;lt;header&amp;gt;
        &amp;lt;a href=&amp;#x27;/&amp;#x27;&amp;gt;Index&amp;lt;/a&amp;gt;
        &amp;lt;a href=&amp;#x27;/about&amp;#x27;&amp;gt;About&amp;lt;/a&amp;gt;
      &amp;lt;/header&amp;gt;
    )
  }
})

module.exports = Header
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add the Header to the Root component’s render function.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Root.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var RouteHandler = Router.RouteHandler
var Header = require(&amp;#x27;./Header.jsx&amp;#x27;)

var Root = React.createClass({
  render: function () {
    var initialProps = {
      __html: safeStringify(this.props)
    }

    return (
      &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;{this.props.title}&amp;lt;/title&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;Header /&amp;gt;
          &amp;lt;RouteHandler {...this.props} /&amp;gt;
          &amp;lt;script
            id=&amp;#x27;initial-props&amp;#x27;
            type=&amp;#x27;application/json&amp;#x27;
            dangerouslySetInnerHTML={initialProps} /&amp;gt;
          &amp;lt;script src=&amp;#x27;bundle.js&amp;#x27; /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    )
  }
})

function safeStringify(obj) {
  return JSON.stringify(obj).replace(/&amp;lt;\/script/g, &amp;#x27;&amp;lt;\\/script&amp;#x27;).replace(/&amp;lt;!--/g, &amp;#x27;&amp;lt;\\!--&amp;#x27;)
}

module.exports = Root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;using-client-side-routing&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#using-client-side-routing&quot; class=&quot;css-1unrqcp&quot;&gt;Using Client-Side Routing&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;React router can also do client-side routing using the Link component.
This can make transitioning pages feel faster and behaves like a fake single-page application.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To use client-side routing, replace the anchor links in the Header with React Routers’s Link components.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Header.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var Link = Router.Link

var Header = React.createClass({
  render: function () {
    return (
      &amp;lt;header&amp;gt;
        &amp;lt;Link to=&amp;#x27;/&amp;#x27;&amp;gt;Index&amp;lt;/Link&amp;gt;
        &amp;lt;Link to=&amp;#x27;/about&amp;#x27;&amp;gt;About&amp;lt;/Link&amp;gt;
      &amp;lt;/header&amp;gt;
    )
  }
})

module.exports = Header
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;adding-critical-css&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#adding-critical-css&quot; class=&quot;css-1unrqcp&quot;&gt;Adding Critical CSS&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Although there are many different approaches to styling components in React,
adding some critical CSS base styles to the head can help speed up performance and development time.
You can skip this step if you prefer using inline styles or linking to a larger stylesheet.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;UPDATE: Originally, this tutorial showed how to include CSS using props.
Using a combination of css-loader and cssnext-loader seems to be a better solution
as it doesn&amp;#x27;t require restarting the server when making changes to the stylesheet
and doesn&amp;#x27;t duplicate the CSS in the &lt;code class=&quot;css-12ivgcj&quot;&gt;initialProps&lt;/code&gt; JSON object.&lt;/em&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;First install &lt;a href=&quot;http://basscss.com&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;Basscss&lt;/a&gt;,
&lt;a href=&quot;https://github.com/webpack/css-loader&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;css-loader&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/cssnext/cssnext-loader&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;cssnext-loader&lt;/a&gt;.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-bash css-h2uv5g&quot;&gt;npm i --save-dev basscss css-loader cssnext-loader
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Add css-loader and cssnext-loader to the webpack config as well as options for cssnext.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// webpack.config.js
var StaticSiteGeneratorPlugin = require(&amp;#x27;static-site-generator-webpack-plugin&amp;#x27;)
var data = require(&amp;#x27;./data&amp;#x27;)

module.exports = {
  entry: &amp;#x27;./entry.js&amp;#x27;,

  output: {
    filename: &amp;#x27;bundle.js&amp;#x27;,
    path: __dirname,
    libraryTarget: &amp;#x27;umd&amp;#x27;
  },

  module: {
    loaders: [
      { test: /\.jsx$/, loader: &amp;#x27;jsx-loader&amp;#x27; },
      { test: /\.css/, loader: &amp;#x27;css-loader!cssnext-loader&amp;#x27; }
    ]
  },

  plugins: [
    new StaticSiteGeneratorPlugin(&amp;#x27;bundle.js&amp;#x27;, data.routes, data)
  ],

  cssnext: {
    compress: true,
    features: {
      rem: false,
      pseudoElements: false,
      colorRgba: false
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In the cssnext configuration options, the output is compressed and the rem and colorRgba postcss plugins have been disabled.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Create a new &lt;code class=&quot;css-12ivgcj&quot;&gt;css&lt;/code&gt; directory and a &lt;code class=&quot;css-12ivgcj&quot;&gt;base.css&lt;/code&gt; file.
Import Basscss and set a new value for the &lt;code class=&quot;css-12ivgcj&quot;&gt;--font-family&lt;/code&gt; custom property.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-css css-h2uv5g&quot;&gt;/* css/base.css */
@import &amp;#x27;basscss&amp;#x27;;

:root {
  --font-family: &amp;#x27;Avenir Next&amp;#x27;, &amp;#x27;Hevletica Neue&amp;#x27;, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In the Root component, import the stylesheet, add a style tag to the head, and add some padding to the body.&lt;/p&gt;&lt;pre class=&quot;css-4dinw3&quot;&gt;&lt;code class=&quot;language-js css-h2uv5g&quot;&gt;// components/Root.jsx
var React = require(&amp;#x27;react&amp;#x27;)
var Router = require(&amp;#x27;react-router&amp;#x27;)
var RouteHandler = Router.RouteHandler
var Header = require(&amp;#x27;./Header.jsx&amp;#x27;)
var css = require(&amp;#x27;../css/base.css&amp;#x27;)

var Root = React.createClass({
  render: function () {
    var initialProps = {
      __html: safeStringify(this.props)
    }

    return (
      &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;{this.props.title}&amp;lt;/title&amp;gt;
          &amp;lt;style dangerouslySetInnerHTML={{ __html: css }} /&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body className=&amp;#x27;p2&amp;#x27;&amp;gt;
          &amp;lt;Header /&amp;gt;
          &amp;lt;RouteHandler {...this.props} /&amp;gt;
          &amp;lt;script
            id=&amp;#x27;initial-props&amp;#x27;
            type=&amp;#x27;application/json&amp;#x27;
            dangerouslySetInnerHTML={initialProps} /&amp;gt;
          &amp;lt;script src=&amp;#x27;bundle.js&amp;#x27; /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    )
  }
})

function safeStringify(obj) {
  return JSON.stringify(obj).replace(/&amp;lt;\/script/g, &amp;#x27;&amp;lt;\\/script&amp;#x27;).replace(/&amp;lt;!--/g, &amp;#x27;&amp;lt;\\!--&amp;#x27;)
}

module.exports = Root
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Restart the dev server to see the changes.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;You should now have a basic static site rendered with React.
For a complete example, see the
&lt;a href=&quot;https://github.com/jxnblk/react-static-site-boilerplate&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;Boilerplate Demo&lt;/a&gt;
or check out the
&lt;a href=&quot;https://github.com/jxnblk/blog&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;source for this blog&lt;/a&gt; or
&lt;a href=&quot;https://github.com/basscss/basscss.github.io&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;the Basscss docs&lt;/a&gt;,
which use a very similar approach.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;Update&lt;/em&gt; Matthew Jones has forked and created an
&lt;a href=&quot;https://github.com/ookk/react-static-boilerplate-ES6&quot; target=&quot;_blank&quot; class=&quot;css-1o1roib&quot;&gt;ES6 boilerplate&lt;/a&gt;
if you&amp;#x27;d like to learn more.&lt;/p&gt;&lt;h2 id=&quot;other-considerations-and-improvements&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#other-considerations-and-improvements&quot; class=&quot;css-1unrqcp&quot;&gt;Other Considerations and Improvements&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Since this uses webpack, there are also ways to include image assets and fonts in the bundle, but I haven’t tried this so your mileage may vary.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The &lt;code class=&quot;css-12ivgcj&quot;&gt;routes&lt;/code&gt; array is passed in as props, and navigation links could be created dynamically rather than being hard coded.
This could make handling lots of pages easier.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you’re hosting the static site on gh-pages, you’ll need a way to handle the base url when using React Router’s Link component.
I don’t know of a good way to do this yet and would love to hear suggestions on how to improve that.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;del&gt;Handling the CSS as shown above can lead to a fairly large chunk of JSON being inserted into the initial-props script tag,
and I’m not sure if there’s a better way to handle that.&lt;/del&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;This is just one way to build static sites with React.
If you’ve seen other ways or have any suggestions for improving on this, I’d love to hear them.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Rethinking Variables in CSS]]></title><description><![CDATA[CSS was first introduced as a way to reduce the complexity of using inline styles and to help separate concerns. After years of ballooning…]]></description><link>https://jxnblk.com/blog/rethinking-variables-in-css/</link><guid isPermaLink="false">https://jxnblk.com/blog/rethinking-variables-in-css/</guid><pubDate>Fri, 08 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;CSS was first introduced as a way to reduce the complexity of using inline styles and to help separate concerns. After years of ballooning stylesheets with the same values being used over and over and losing sync, CSS preprocessors introduced variables to help keep values defined in a single place. Soon &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css-variables/&quot; class=&quot;css-1o1roib&quot;&gt;custom properties&lt;/a&gt; will be part of the CSS specification, which promises a native, more robust approach than what preprocessors can do.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While variables and custom properties make updating multiple instances of the same value trivial, we often still end up with multiple instances of the same property-value definitions spread throughout a global stylesheet.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;Bear with me for a second and consider this a thought experiment…&lt;/em&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;What if instead of repeating these definitions in our stylesheets, we treated CSS rulesets as variables? That is, instead of defining something like a color across many styles, it’s only defined once, and is used by applying classes to HTML elements —i.e. .green instead of $green. We could vastly DRY up our stylesheets while making only a minimal impact on HTML size. If you apply this idea widely enough, the entire stylesheet can become so-called critical CSS.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Effectively, this means removing complexity from stylesheets, which are global and leaky, and moving that complexity to the templating system, which is much more isolated and easier to manage.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I know that this approach has sped up the development process in my professional work and for small open source projects, and I’ve never seen any evidence that this would break down when working at scale. Though I suspect that very few have ever really attempted this, and it hasn’t been long enough to know what sort of problems this might cause over the long term.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;is-this-semantic&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#is-this-semantic&quot; class=&quot;css-1unrqcp&quot;&gt;Is this semantic?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Yes, read this article from Nicolas Gallagher — it is the best answer to this question on the Internet: &lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot; class=&quot;css-1o1roib&quot;&gt;About HTML Semantics and Front-End Architecture&lt;/a&gt;. Classes do not affect HTML semantics, and you absolutely should use well structured, accessible, semantic HTML. Period.&lt;/p&gt;&lt;h2 id=&quot;what-about-mixing-concerns&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-about-mixing-concerns&quot; class=&quot;css-1unrqcp&quot;&gt;What about mixing concerns?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Web components and things like React already do this and for good reason. The CSS Zen Garden is a pipe dream. If you could actually redesign something by only editing the stylesheet, we would all be using the same template and no one would be writing any new HTML.&lt;/p&gt;&lt;h2 id=&quot;wont-this-lead-to-a-lot-of-classes-in-html&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#wont-this-lead-to-a-lot-of-classes-in-html&quot; class=&quot;css-1unrqcp&quot;&gt;Won’t this lead to a lot of classes in HTML?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you’re concerned about this, I’m concerned about how much repetition you have in your templates. Most web projects will be utilizing some sort of templating system. Just as with any code, templates should be kept DRY. If the markup for something like a modal overlay is defined multiple times across templates, it should be consolidated to a single place. Living style guides and using a component-based system like React can help enforce this approach across a team.&lt;/p&gt;&lt;h2 id=&quot;wouldnt-there-be-a-huge-maintenance-cost&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#wouldnt-there-be-a-huge-maintenance-cost&quot; class=&quot;css-1unrqcp&quot;&gt;Wouldn’t there be a huge maintenance cost?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Potentially. Though, I’ve only seen a handful of similar techniques at scale, and I suspect that, if it were implemented in a sensible way, it would be far better than the technical debt we incur with current CSS practices.&lt;/p&gt;&lt;h2 id=&quot;what-about-web-components&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-about-web-components&quot; class=&quot;css-1unrqcp&quot;&gt;What about web components?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Web components add a whole new dimension to this dynamic by introducing style encapsulation and composability — essentially reducing utility styles to an implementation detail. I’ll try to address what that could look like in a follow-up post.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;To be continued…&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[5 ways to not shoot yourself in the foot with CSS]]></title><description><![CDATA[Don’t make assumptions Don’t be specific Don’t override anything Don’t entangle it with markup Don’t repeat yourself]]></description><link>https://jxnblk.com/blog/5-ways-to-not-shoot-yourself-in-the-foot-with-css/</link><guid isPermaLink="false">https://jxnblk.com/blog/5-ways-to-not-shoot-yourself-in-the-foot-with-css/</guid><pubDate>Tue, 30 Dec 2014 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;ol class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Don’t make assumptions&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Don’t be specific&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Don’t override anything&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Don’t entangle it with markup&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Don’t repeat yourself&lt;/li&gt;&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[It’s Okay to Look the Same]]></title><description><![CDATA[Every once in a while I hear someone complain about the visual homogenization of the web, and front-end frameworks often get the brunt of…]]></description><link>https://jxnblk.com/blog/its-okay-to-look-the-same/</link><guid isPermaLink="false">https://jxnblk.com/blog/its-okay-to-look-the-same/</guid><pubDate>Fri, 25 Apr 2014 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Every once in a while I hear someone complain about the visual homogenization of the web, and front-end frameworks often get the brunt of the attack. This visual sameness isn’t necessarily a bad thing.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;visual-design-is-easy&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#visual-design-is-easy&quot; class=&quot;css-1unrqcp&quot;&gt;Visual design is easy&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Visual design is one of the easiest parts of web design to get right. Beautiful looking sites are often perceived as being easier to use, but that’s a low hurdle to clear. Using clean typography, a good color palette, solid visual hierarchy, and consistency will get you most of the way there.&lt;/p&gt;&lt;h2 id=&quot;its-also-hard&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#its-also-hard&quot; class=&quot;css-1unrqcp&quot;&gt;It’s also hard&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The hardest part of visual design is stakeholder buy-in. It’s easily the most noticeable part of a design, and it’s one that people will certainly have opinions about — whether or not they understand typography, gestalt, or color psychology. If you’re the one calling the shots, then you’ve got it easy.&lt;/p&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Visual design is a bike shed. User experience is a nuclear reactor.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;its-called-bootstrap-for-a-reason&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#its-called-bootstrap-for-a-reason&quot; class=&quot;css-1unrqcp&quot;&gt;It’s called Bootstrap for a reason&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;When building something new, frameworks can help settle arguments over visual details. And, if you don’t have a background in design, using a framework can help you achieve a certain baseline of visual polish. Frameworks get you started and create well-defined systems to customize and build upon while you validate your ideas.&lt;/p&gt;&lt;h2 id=&quot;dont-not-do-it&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#dont-not-do-it&quot; class=&quot;css-1unrqcp&quot;&gt;Don’t not do it&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The visual aspects of web design are extremely important. If you’ve got the time and resources, by all means, sweat the details. But before you do, make sure your site works. Time spent deliberating visual design could be better spent conducting research with your users. A beautiful site that doesn’t align with mental models isn’t worth much to your business.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[I don’t know how to design]]></title><description><![CDATA[I’ll admit it. I don’t know how to design without research. Without upfront research, you’re not designing things, you’re just building…]]></description><link>https://jxnblk.com/blog/i-dont-know-how-to-design/</link><guid isPermaLink="false">https://jxnblk.com/blog/i-dont-know-how-to-design/</guid><pubDate>Wed, 16 Apr 2014 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ll admit it.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;i-dont-know-how-to-design-without-research&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#i-dont-know-how-to-design-without-research&quot; class=&quot;css-1unrqcp&quot;&gt;I don’t know how to design without research.&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Without upfront research, you’re not designing things, you’re just building things that might or might not meet your users’ needs or fit their mental models. Chances are, they won’t. User acceptance testing and A/B testing are important, but won’t give you the insights you’ll need to start off on the right foot.&lt;/p&gt;&lt;h2 id=&quot;i-dont-know-how-to-design-without-metrics&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#i-dont-know-how-to-design-without-metrics&quot; class=&quot;css-1unrqcp&quot;&gt;I don’t know how to design without metrics.&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Whether it’s business goals, KPIs, or conversion rates, without metrics you’ll have no idea what problems you’re solving or if the solutions you’re building will fit the bill.&lt;/p&gt;&lt;h2 id=&quot;i-dont-know-how-to-design-without-iterating&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#i-dont-know-how-to-design-without-iterating&quot; class=&quot;css-1unrqcp&quot;&gt;I don’t know how to design without iterating.&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Your first attempt at anything will not be your best. Put something out there and continually work on making it better and better.&lt;/p&gt;&lt;h2 id=&quot;i-dont-know-how-to-design-without-context&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#i-dont-know-how-to-design-without-context&quot; class=&quot;css-1unrqcp&quot;&gt;I don’t know how to design without context.&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Good design simplifies complexity to align with users’ mental models. Without understanding context and creating systems to design within, you’re just adding noise that contributes to cognitive overload for both users and the people building the product.&lt;/p&gt;&lt;h2 id=&quot;i-dont-know-how-to-design-without-collaboration&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#i-dont-know-how-to-design-without-collaboration&quot; class=&quot;css-1unrqcp&quot;&gt;I don’t know how to design without collaboration.&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Design doesn’t happen in a vacuum. Whether it’s through participatory design with users, sketching sessions with other designers, developers, product managers, and stakeholders, or just an old fashioned critique, the best design work comes from working with others.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Designing in the Browser Faster]]></title><description><![CDATA[I’ve been dabbling with HTML and CSS for years—building small websites for myself and friends and building prototypes to test designs. And…]]></description><link>https://jxnblk.com/blog/designing-in-the-browser-faster/</link><guid isPermaLink="false">https://jxnblk.com/blog/designing-in-the-browser-faster/</guid><pubDate>Mon, 14 Apr 2014 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ve been dabbling with HTML and CSS for years—building small websites for myself and friends and building prototypes to test designs. And, while I’ve been fascinated with the idea of designing in the browser for a long time, it wasn’t until recently that it’s become much, much faster for me than using traditional design software.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;getting-faster&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#getting-faster&quot; class=&quot;css-1unrqcp&quot;&gt;Getting faster&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Practice has certainly helped, but what really sped up my ability to design and iterate in code was an approach called Object Oriented CSS, or OOCSS. My friend and colleague sent me down this scary-sounding path over a year ago, and I haven’t looked back since. He gave me a ton of reading material, coached me with code reviews, and constantly challenged me. Most of the articles on OOCSS focus on front-end performance, code maintenance benefits, and things like naming conventions. What most people don’t tell you is how much faster it can make designing in code.&lt;/p&gt;&lt;h2 id=&quot;do-one-thing-well&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#do-one-thing-well&quot; class=&quot;css-1unrqcp&quot;&gt;Do one thing well&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;At its core, OOCSS focuses on highly reusable styles that follow the open/closed principle—that is, they’re open for extension, but closed for modification. They do one thing and do it well. You can think of them as something like layer effects or color swatches. When I’m fleshing out a design, I spend a lot of time adjusting spacing, font sizes, colors, and other small details. I often don’t know what combination of styles each element should have before I see it in context.&lt;/p&gt;&lt;h2 id=&quot;dont-make-assumptions&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#dont-make-assumptions&quot; class=&quot;css-1unrqcp&quot;&gt;Don’t make assumptions&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For new web projects, I usually start with a base type scale, spacing scale, and a rough color palette. Having these separated into single-purpose utilities gives me the flexibility to jump straight into HTML and experiment, without having to constantly write and rewrite CSS. I try not to make assumptions about what any one element or module will end up looking like. Instead, I make sure each element feels right in context, then create more defined patterns when needed.&lt;/p&gt;&lt;h2 id=&quot;content-centric-design&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#content-centric-design&quot; class=&quot;css-1unrqcp&quot;&gt;Content-centric design&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Using single-purpose styles aligns well with the concept of content-centric design. Defining heading styles without knowing what they say or where they’re located can be difficult. Having the ability to quickly adjust type hierarchy, color, and other styles to get the rhythm, balance, and gestalt right is key to successfully designing in the browser.&lt;/p&gt;&lt;h2 id=&quot;from-paper-to-prototype&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#from-paper-to-prototype&quot; class=&quot;css-1unrqcp&quot;&gt;From paper to prototype&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Using this approach, I typically go directly from notes and paper sketches to building prototypes in code. The only time I open graphic applications like Illustrator or Photoshop are when I need to create image assets to use in code. And with tools like Github, I can try out a number of iterations on different branches in a non-destructive way.&lt;/p&gt;&lt;h2 id=&quot;choose-the-right-tools&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#choose-the-right-tools&quot; class=&quot;css-1unrqcp&quot;&gt;Choose the right tools&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Personally, this has sped up my workflow tremendously, and every designer I’ve introduced to this approach has picked it up quickly and enthusiastically. You might find OOCSS to be a useful addition to your design toolkit as well.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[An Update on the Hamburger Menu]]></title><description><![CDATA[About a year ago, I wrote  Hamburgers  &  Basements: Why Not to Use Left Nav Flyouts . Since then, a few things have happened. Facebook has…]]></description><link>https://jxnblk.com/blog/an-update-on-the-hamburger-menu/</link><guid isPermaLink="false">https://jxnblk.com/blog/an-update-on-the-hamburger-menu/</guid><pubDate>Sat, 12 Apr 2014 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;About a year ago, I wrote &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://jxnblk.tumblr.com/post/36218805036/hamburgers-basements-why-not-to-use-left-nav-flyouts&quot; class=&quot;css-1o1roib&quot;&gt;Hamburgers &amp;amp; Basements: Why Not to Use Left Nav Flyouts&lt;/a&gt;.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Since then, a few things have happened.&lt;/p&gt;&lt;ol class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Facebook has discontinued using the hamburger menu in their iOS app.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;A few desktop websites have replaced their persistent navigation with the hamburger menu – who knows if they&amp;#x27;re actually testing it or how they&amp;#x27;re interpreting the results.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Time Magazine decided to use it:&lt;/li&gt;&lt;/ol&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&amp;quot;No one understands the icon, let&amp;#x27;s add the word menu. The word is too small, let&amp;#x27;s add a pop-up calling it out.&amp;quot; &lt;a href=&quot;http://t.co/Jargi7gavX&quot; class=&quot;css-1o1roib&quot;&gt;pic.twitter.com/Jargi7gavX&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;— Luke Wroblewski (@lukew) &lt;a href=&quot;https://twitter.com/lukew/statuses/443425041795928064&quot; class=&quot;css-1o1roib&quot;&gt;March 11, 2014&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;4&quot; class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Personally, I think user testing the hamburger menu is good enough, but these guys A/B tested it: &lt;a href=&quot;http://thenextweb.com/dd/2014/04/08/ux-designers-side-drawer-navigation-costing-half-user-engagement/&quot; class=&quot;css-1o1roib&quot;&gt;UX designers: Side drawer navigation could be costing you half your user engagement&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;This guy tested it twice: &lt;a href=&quot;http://exisweb.net/mobile-menu-abtest&quot; class=&quot;css-1o1roib&quot;&gt;Mobile Menu AB Tested: Hamburger Not the Best Choice?&lt;/a&gt; and &lt;a href=&quot;http://exisweb.net/menu-eats-hamburger&quot; class=&quot;css-1o1roib&quot;&gt;Hamburger vs Menu: The Final AB Test&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;This guy also wrote about it: &lt;a href=&quot;http://mor10.com/hamburger-bad/&quot; class=&quot;css-1o1roib&quot;&gt;The Hamburger is Bad for You&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Despite all of this, I still haven&amp;#x27;t seen any evidence suggesting that the hamburger menu is an improvement.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;patterns&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#patterns&quot; class=&quot;css-1unrqcp&quot;&gt;Patterns&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Basically it comes down to interface design patterns. Patterns rely on familiarity and emerge slowly over time. Most of the ones we use on the web today have been around for many years.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Users have plenty of new things to learn without adding contrived navigation patterns into the mix. Let&amp;#x27;s stop trying to innovate device-specific interactions and leave it to the device manufacturers.&lt;/p&gt;&lt;h2 id=&quot;lets-focus-on-the-real-problems&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#lets-focus-on-the-real-problems&quot; class=&quot;css-1unrqcp&quot;&gt;Let&amp;#x27;s focus on the real problems&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Product design requires solving many more difficult problems.
For example:&lt;/p&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;How does your product align with a user&amp;#x27;s mental model?&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;How do you scale your information architecture?&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;How do you make your product meaningful to your users?&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;How do you reach a wider audience with your product?&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Personally, I&amp;#x27;d much rather be designing and testing solutions for problems like these.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[I’m Sick of Your Tiny, Tiny Type]]></title><description><![CDATA[Your tiny type is hard to read – no, not hard to read, impossible to read. I carry my phone with me everywhere, but I always seem to forget…]]></description><link>https://jxnblk.com/blog/im-sick-of-your-tiny-tiny-type/</link><guid isPermaLink="false">https://jxnblk.com/blog/im-sick-of-your-tiny-tiny-type/</guid><pubDate>Tue, 29 Jan 2013 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Your tiny type is hard to read – no, not hard to read, impossible to read. I carry my phone with me everywhere, but I always seem to forget my magnifying glass. I tap the Safari Reader button, but that’s not a solution to the problem. That’s a band-aid for your bad typesetting.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Sometimes I’m on my computer, and Reader doesn’t work on your web app. I hit CMD + two or three times so that my dyslexic brain can make sense of the musty 14px Helvetica your servers regurgitated all over my screen. Then the layout falls apart. Words start smashing together. Ads bleed into my emails. And I find myself scrolling up, down, left, right, left, right – what in the hell is this? The Konami code? I don’t need 30 extra lives. I want to read your content.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;And I know I’m not the only one who hates your tiny type. How many times have I heard users complain about fonts being too small? More times than I’ve heard them complain about fonts being too large – wait, I’ve never heard a user complain about that. Your users aren’t asking for a faster horse – they’re struggling to read your content. Surely that isn’t what you’re going for, and surely that isn’t a good experience.&lt;/p&gt;&lt;style data-emotion-css=&quot;1bbz37o&quot;&gt;.css-1bbz37o{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:20px;}&lt;/style&gt;&lt;h3 id=&quot;further-reading&quot; class=&quot;css-1bbz37o&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#further-reading&quot; class=&quot;css-1unrqcp&quot;&gt;Further reading:&lt;/a&gt;&lt;/h3&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://wm4.wilsonminer.com/posts/2008/oct/20/relative-readability/&quot; class=&quot;css-1o1roib&quot;&gt;Relative Readability&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;a href=&quot;http://informationarchitects.net/blog/100e2r/&quot; class=&quot;css-1o1roib&quot;&gt;The 100% Easy-2-Read Standard&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;a href=&quot;http://37signals.com/svn/posts/3285-the-typography-and-layout-behind-the-new-signal-vs-noise-redesign&quot; class=&quot;css-1o1roib&quot;&gt;The Typography and Layout behind the new Signal vs. Noise redesign&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Organizing Mobile Navigation Based on Information-Seeking Behavior]]></title><description><![CDATA[When opening an application, a user should be able to understand its functionality, see relevant content, and get to where they want to go…]]></description><link>https://jxnblk.com/blog/organizing-mobile-navigation-based-on-information-seeking-behavior/</link><guid isPermaLink="false">https://jxnblk.com/blog/organizing-mobile-navigation-based-on-information-seeking-behavior/</guid><pubDate>Wed, 16 Jan 2013 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;When opening an application, a user should be able to understand its functionality, see relevant content, and get to where they want to go. Applications that obscure navigation with the intent of focusing on content can make finding specific information difficult. On the other hand, skewing towards too much navigation can overwhelm the user. Mobile apps should balance navigation for users with different information needs.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;An application&amp;#x27;s IA should be based on solid user research and mental models, but navigation should take the user context and design constraints of the platform into consideration. With desktop apps, the ample screen real estate allows for high information density and complex top-level navigation. Mobile apps require different approaches to map navigation to the product&amp;#x27;s IA. One approach is to organize navigation based on three common &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://boxesandarrows.com/four-modes-of-seeking-information-and-how-to-design-for-them/&quot; class=&quot;css-1o1roib&quot;&gt;information seeking behaviors&lt;/a&gt;: &lt;em class=&quot;css-0&quot;&gt;known-item seeking&lt;/em&gt;, &lt;em class=&quot;css-0&quot;&gt;exploratory seeking&lt;/em&gt;, and &lt;em class=&quot;css-0&quot;&gt;discovery&lt;/em&gt;.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;what-is-known-item-seeking&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#what-is-known-item-seeking&quot; class=&quot;css-1unrqcp&quot;&gt;What is Known-item Seeking?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Known-item seeking is exactly what it sounds like: a user knows what they&amp;#x27;re looking for and seeks it out. For example, a person going to the market to pick up eggs is engaged in known-item seeking. Search can be a great way to accommodate this behavior. But with mobile apps, avoiding touchscreen keyboards is generally good practice since there&amp;#x27;s more room for error. Recognition is easier than recollection, and scanning a list of well-labeled categories can be a much quicker way to find information. Just be sure the labels make sense to users and are backed by research, using methods such as &lt;a href=&quot;http://www.measuringusability.com/blog/cardsort-tree-test.php&quot; class=&quot;css-1o1roib&quot;&gt;card sorting and tree testing&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;exploratory-seeking&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#exploratory-seeking&quot; class=&quot;css-1unrqcp&quot;&gt;Exploratory Seeking&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Exploratory seeking is when the user has a vague idea of what they&amp;#x27;re looking for but may not know the proper words to describe it. An example of this behavior is when a person goes to the market looking for ingredients for an omelet, but isn&amp;#x27;t sure which vegetables are in season. Lists of well-labeled categories can accommodate this behavior as well.&lt;/p&gt;&lt;h2 id=&quot;discovery&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#discovery&quot; class=&quot;css-1unrqcp&quot;&gt;Discovery&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Discovery is when the user isn&amp;#x27;t looking for anything in particular – for instance, when a hungry person goes to the market with no idea what they&amp;#x27;d like to eat. Discovery in mobile apps is often supported by displaying relevant content – as opposed to navigation – and is usually organized by time or social cues, such as popularity.&lt;/p&gt;&lt;h2 id=&quot;examples&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#examples&quot; class=&quot;css-1unrqcp&quot;&gt;Examples&lt;/a&gt;&lt;/h2&gt;&lt;style data-emotion-css=&quot;1a2v9hb&quot;&gt;.css-1a2v9hb{max-width:100%;height:auto;}&lt;/style&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/fab-search.png&quot; alt=&quot;Fab.com App&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While the navigation in Fab.com&amp;#x27;s mobile app is poorly organized and not very obvious, the app still supports known-item and exploratory seeking. Its Search view has both a text field for traditional search, and a table view navigation of categories, colors, and prices. &lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/apple-store-categories.png&quot; alt=&quot;Apple Store App&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;The Apple Store app&amp;#x27;s navigation includes a Featured tab, which encourages discovery, and a Products tab for seeking. A table view of well-labeled product categories provides quick known-item seeking, and both tabs include a search field at the top.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/etsy-search.png&quot; alt=&quot;Etsy App&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Similarly, the Etsy app supports discovery with its Explore tab and facilitates known-item and exploratory seeking with the categories listed in the Search tab. Like the desktop website, the mobile app&amp;#x27;s navigation provides obvious paths to specific items within their large inventory, but is significantly simpler at the top-level.&lt;/p&gt;&lt;h2 id=&quot;rethinking-mobile-navigation&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#rethinking-mobile-navigation&quot; class=&quot;css-1unrqcp&quot;&gt;Rethinking Mobile Navigation&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Designing mobile navigation requires different approaches than desktop apps. Don&amp;#x27;t try to cram a desktop-based navigation into a mobile app, and don&amp;#x27;t neglect navigation in the pursuit of making an app content-centric. Take a step back, look at your product&amp;#x27;s IA, and consider other organizing principles for designing mobile navigation.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Buckets and Jumpoffs: Using Content-Centric Contextual Navigation]]></title><description><![CDATA[While table views provide a clear and simple way to navigate certain types of content, mobile should be about putting content and user goals…]]></description><link>https://jxnblk.com/blog/buckets-and-jumpoffs-using-content-centric-contextual-navigation/</link><guid isPermaLink="false">https://jxnblk.com/blog/buckets-and-jumpoffs-using-content-centric-contextual-navigation/</guid><pubDate>Fri, 07 Dec 2012 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While table views provide a clear and simple way to navigate certain types of content, mobile should be about putting content and user goals first and navigation second. Don&amp;#x27;t overload the user with navigation choices, show meaningful content instead. Even though tab bars are great – sitting below the content, out of the way until the user needs them – there are new opportunities to explore content-centric contextual navigation when designing for mobile.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;create-better-table-views-with-teasers&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#create-better-table-views-with-teasers&quot; class=&quot;css-1unrqcp&quot;&gt;Create Better Table Views with Teasers&lt;/a&gt;&lt;/h2&gt;&lt;style data-emotion-css=&quot;1a2v9hb&quot;&gt;.css-1a2v9hb{max-width:100%;height:auto;}&lt;/style&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/Buckets-Mail-Messages.png&quot; alt=&quot;Mail &amp;amp; Messages&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A quick and dirty way to give table views more meaning is by using teasers. Apple&amp;#x27;s Mail App shows a numerical indicator of  unread emails at the top level, then shows truncated previews of actual messages at the inbox level. Similarly, Messages shows previews of the last message sent before the user drills into the conversation.&lt;/p&gt;&lt;h2 id=&quot;flipping-the-teaser-approach-on-its-head&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#flipping-the-teaser-approach-on-its-head&quot; class=&quot;css-1unrqcp&quot;&gt;Flipping the Teaser Approach on Its Head&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;While teasers can make basic table views more meaningful, they prioritize navigation over content. Taking the teaser approach and flipping it on its head can result in a content-centric design that provides meaningful contextual navigation to the user. Many apps and e-commerce sites already do this, and it can help create focus on content discovery rather than search.&lt;/p&gt;&lt;h2 id=&quot;what-are-buckets--jumpoffs&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-are-buckets--jumpoffs&quot; class=&quot;css-1unrqcp&quot;&gt;What are Buckets &amp;amp; Jumpoffs?&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;You&amp;#x27;ve probably seen this pattern before: take a collection of items, group them into categories, present a limited number of those items in buckets or lists, and provide a link to jump off and view more. There doesn&amp;#x27;t seem to be a great name for this pattern, some have suggested calling it the &lt;em class=&quot;css-0&quot;&gt;egg carton&lt;/em&gt; or the &lt;em class=&quot;css-0&quot;&gt;showcase&lt;/em&gt;, but neither of those terms seem to capture the essence of the jumpoff link&amp;#x27;s contextual navigation – thus, &lt;em class=&quot;css-0&quot;&gt;buckets &amp;amp; jumpoffs&lt;/em&gt;.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/Buckets-Twitter.png&quot; alt=&quot;Twitter&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Twitter uses this approach in its profile view, along with a mix of standard table views. Instead of seeing all of the user&amp;#x27;s tweets in the profile view, there is a small bucket showing the latest three tweets and a link to view more.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/Buckets-Rdio.png&quot; alt=&quot;Rdio&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Rdio does this to great effect in its search results view, showing results bucketed by artists, albums, songs, playlists, and people. This view provides direct links to the top results and a link to view more results in each bucket as well.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/Buckets-AppStore-iTunes.png&quot; alt=&quot;App Store &amp;amp; iTunes&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Using a mixture of swipeable carousel buckets and tiles, Apple creates a lot of visual interest in its App Store and iTunes apps. These &lt;em class=&quot;css-0&quot;&gt;Featured&lt;/em&gt; views are frequently updated and serve as a great way to promote content discovery in an otherwise extremely complex IA. Apple also uses buckets on its desktop version of iTunes, showing that this pattern can be effectively scaled up to larger displays.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/Buckets-Foursquare.png&quot; alt=&quot;Foursquare&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Similarly, Foursquare places contextual navigation – which is often delegated to detail views – in-line with its content-rich list view. Unfortunately, Foursquare&amp;#x27;s desktop site lacks the same level of content discovery afforded in its mobile app and, instead, relies heavily on traditional search.&lt;/p&gt;&lt;h2 id=&quot;focus-on-content-but-dont-neglect-navigation&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#focus-on-content-but-dont-neglect-navigation&quot; class=&quot;css-1unrqcp&quot;&gt;Focus on Content but Don&amp;#x27;t Neglect Navigation&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Mobile is a new medium, and its constraints and advantages should be taken into account when designing navigation systems. The limited screen real estate makes traditional faceted filtering and search patterns more difficult. Instead of replicating desktop navigation-heavy approaches, try content-centric contextual navigation. To create a cohesive cross-platform experience, you can translate mobile navigation patterns to desktop. This often leads to simple, focused interfaces that will delight your users.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;When designing for mobile, focus on content, but don&amp;#x27;t neglect navigation in the process.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Advantages of Table Views Over Left Nav Flyouts]]></title><description><![CDATA[At first glance, these two navigation patterns seem very similar, but there are a few points that give table views *  a huge leg up. When…]]></description><link>https://jxnblk.com/blog/the-advantages-of-table-views-over-left-nav-flyouts/</link><guid isPermaLink="false">https://jxnblk.com/blog/the-advantages-of-table-views-over-left-nav-flyouts/</guid><pubDate>Sat, 01 Dec 2012 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1a2v9hb&quot;&gt;.css-1a2v9hb{max-width:100%;height:auto;}&lt;/style&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/TableViewsAndBasementsIllustration.png&quot; alt=&quot;image&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;At first glance, these two navigation patterns seem very similar, but there are a few points that give table views&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;&quot; class=&quot;css-1o1roib&quot;&gt;*&lt;/a&gt; a huge leg up. When dealing with a multi-tiered hierarchy or a variable amount of navigation items – such as text messages, emails, folksonomic categories, folders, files, etc. – table views can be a great solution. Lists are generally easier to scan than tiles, and vertical scrolling is an easy interaction for touchscreen mobile devices.&lt;/p&gt;&lt;style data-emotion-css=&quot;1d3ehct&quot;&gt;.css-1d3ehct{font-family:system-ui,sans-serif;font-weight:700;line-height:1.25;margin-top:32px;margin-bottom:16px;font-size:24px;}@media screen and (min-width:40em){.css-1d3ehct{font-size:32px;}}&lt;/style&gt;&lt;h2 id=&quot;some-advantages-of-table-views&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;style data-emotion-css=&quot;1unrqcp&quot;&gt;.css-1unrqcp{color:inherit;-webkit-text-decoration:none;text-decoration:none;}&lt;/style&gt;&lt;a href=&quot;#some-advantages-of-table-views&quot; class=&quot;css-1unrqcp&quot;&gt;Some advantages of table views:&lt;/a&gt;&lt;/h2&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/SettingsApp.png&quot; alt=&quot;image&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;Users are likely familiar with this pattern, since it&amp;#x27;s widely used across iOS.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;With table views, the user sees the top level, bird&amp;#x27;s-eye view of the hierarchy without requiring any interaction.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;As the user drills farther down the hierarchy, the navigation bar continues to look and work the same way, creating continuity in the UI.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;The navigation bar, along with &lt;a href=&quot;http://mrgan.tumblr.com/post/10492926111/labeling-the-back-button&quot; class=&quot;css-1o1roib&quot;&gt;properly labeled back buttons&lt;/a&gt;, works as a myopic breadcrumb, showing the user&amp;#x27;s current location and giving context to what the next level up in the hierarchy is. A hamburger button gives no context.&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/TwitterProfile.png&quot; alt=&quot;image&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;ul class=&quot;css-0&quot;&gt;&lt;li class=&quot;css-0&quot;&gt;This pattern can work seamlessly with contextual navigation. Twitter&amp;#x27;s profile view is a perfect example of this.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;Table views can be effectively combined with tab bars, bringing the advantages of persistent navigation to a complex IA.&lt;/li&gt;&lt;li class=&quot;css-0&quot;&gt;The back button is in a hard-to-reach location, but when combined with a tab bar, the tab bar button can act as an easy-to-reach shortcut to the top-level.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;what-can-be-learned-from-left-nav-flyouts&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#what-can-be-learned-from-left-nav-flyouts&quot; class=&quot;css-1unrqcp&quot;&gt;What can be learned from left nav flyouts&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;One advantage that the left nav flyout pattern generally has over table views is the swipe-to-reveal gesture shortcut. For table views, this gesture could be used as a shortcut for the back button – much like Loren Brichter&amp;#x27;s original Twitter for iPad – and navigation is probably a more common action than deleting items with the swipe-to-delete gesture.&lt;/p&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/AppleStoreApp.png&quot; alt=&quot;image&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Some may argue that the modal nature of left nav flyouts is well-suited for use as filtering controls for large collections. But, to use the Apple Store app as an example again, table views can be a very efficient way to filter through large collections of information.&lt;/p&gt;&lt;h2 id=&quot;forget-the-flyout--use-table-views&quot; class=&quot;css-1d3ehct&quot;&gt;&lt;a href=&quot;#forget-the-flyout--use-table-views&quot; class=&quot;css-1unrqcp&quot;&gt;Forget the flyout – use table views&lt;/a&gt;&lt;/h2&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If your product has a complex IA that can&amp;#x27;t neatly fit into a tab bar, consider the advantages that table views can provide before jumping on the left nav flyout bandwagon.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;*Note: For lack of a better term, table views refers to the one-window drilldown pattern that combines lists and navigation bars and is widely used in iOS.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hamburgers & Basements: Why Not to Use Left Nav Flyouts]]></title><description><![CDATA["Good design makes a product understandable"  – Dieter Rams Good navigation should do at least three things well: (1) it should allow the…]]></description><link>https://jxnblk.com/blog/hamburgers-and-basements-why-not-to-use-left-nav-flyouts/</link><guid isPermaLink="false">https://jxnblk.com/blog/hamburgers-and-basements-why-not-to-use-left-nav-flyouts/</guid><pubDate>Wed, 21 Nov 2012 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;blockquote class=&quot;css-0&quot;&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;style data-emotion-css=&quot;1vg6q84&quot;&gt;.css-1vg6q84{font-weight:700;}&lt;/style&gt;&lt;strong class=&quot;css-1vg6q84&quot;&gt;&lt;em class=&quot;css-0&quot;&gt;&amp;quot;Good design makes a product understandable&amp;quot;&lt;/em&gt;&lt;/strong&gt; – Dieter Rams&lt;/p&gt;&lt;/blockquote&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Good navigation should do at least three things well: (1) it should allow the user to navigate; (2) it should serve as wayfinding, letting the user know where they are; and (3) it should help the user understand what the product is capable of. If your navigation is not doing these three things, something&amp;#x27;s wrong.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;For the iPhone, Apple conjured up three fairly solid navigation patterns: the tab bar, the table view (e.g. Messages &amp;amp; Mail), and the card stack (e.g. Weather). All three work fairly well if used as intended, but there&amp;#x27;s always room for experimentation and evolution in UI design – and always room for designers and developers to screw it up.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Path and Facebook&amp;#x27;s mobile left nav flyout pattern is one such experimentation that should be avoided. &lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;https://twitter.com/markkawano/status/256848377260679168&quot; class=&quot;css-1o1roib&quot;&gt;Mark Kawano&lt;/a&gt; calls it the &amp;quot;hamburger icon that slides open the basement.&amp;quot; Why call it the basement? Because it&amp;#x27;s hidden, dark, there&amp;#x27;s a ton of crap in it, and, frankly, it&amp;#x27;s scary and no one wants to go down there. Hiding the navigation allows Path to present itself in a more immersive, content-centric way but also tells the user that there&amp;#x27;s nothing much else to the app beyond its stream view.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;In Facebook&amp;#x27;s case, the basement just obscures a lot of the functionality available on the desktop version. The News Feed is important &amp;amp; Facebook provides a lot of contextual navigation, but Facebook&amp;#x27;s got a lot of other hidden cracks and crevices that aren&amp;#x27;t readily apparent from its iPhone app. But who knows? Maybe Facebook doesn&amp;#x27;t care about Messages, Places, or Events.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Another, more obvious downside to the left nav flyout is its inefficiency: tap a &lt;a href=&quot;http://www.lukew.com/ff/entry.asp?1649&quot; class=&quot;css-1o1roib&quot;&gt;hard-to-reach button&lt;/a&gt;, wait for an animation, scroll a list while scanning for the item you want, tap again, and wait for another animation. Your user doesn&amp;#x27;t have time for that – don&amp;#x27;t subject them to such nonsense.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Having a lot of functionality and complexity in your product is no excuse. If your navigation has more than five items at the top-level, that&amp;#x27;s just lazy information architecture. Too many choices is bad anywhere, especially on a 4-inch display.&lt;/p&gt;&lt;style data-emotion-css=&quot;1a2v9hb&quot;&gt;.css-1a2v9hb{max-width:100%;height:auto;}&lt;/style&gt;&lt;img src=&quot;http://jxnblk.s3.amazonaws.com/assets/images/HamburgersAndBasements-TabBars.png&quot; alt=&quot;image&quot; class=&quot;css-1a2v9hb&quot;/&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Contrast this with Twitter&amp;#x27;s iPhone app. Holding the app in hand, the user knows exactly what it is. It&amp;#x27;s small enough to wrap their brain around, and it feels easy to use. The persistent tab bar quickly describes what the user can do, where they can go, and what type of content they&amp;#x27;ll see. It also – like any persistent navigation pattern – provides context about where the user has navigated and provides an easy one-tap path to the main parts of the app.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Foursquare is another example of great mobile navigation, no doubt benefiting from its mobile-first approach. Foursquare is a much more complex product now than when it first launched, but they&amp;#x27;ve maintained a simple IA that organizes functionality and content in a way that makes this complexity manageable for the user.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Instagram, arguably, could have employed a left nav flyout for a more immersive feel, but instead employs a tab bar that emphasizes content consumption, exploration, content-creation, notifications, and user profiles. This not only makes navigating the app quicker, it also tells the user what they should do with the app.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Or take the Apple Store app as an example. The desktop counterpart has a fair amount of navigation items, following patterns set by other e-commerce products, but Apple restructured the top-level navigation of their mobile app around discovery, search, and transactions.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;If you have a complex product and a large number of top-level navigation items, consider taking a mobile-first approach and restructuring your IA differently from its desktop version. Maybe a goal-based architecture makes sense – for example, search vs. discovery – or maybe there are broader categories that your functionality and content can more neatly fit into. Just like &lt;a href=&quot;http://karenmcgrane.com/2012/09/04/adapting-ourselves-to-adaptive-content-video-slides-and-transcript-oh-my/&quot; class=&quot;css-1o1roib&quot;&gt;truncating text is not a content strategy&lt;/a&gt;, throwing an entire desktop IA into the basement of a mobile app is not good information architecture.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Is the left nav flyout always a bad navigation pattern? It depends, but I haven&amp;#x27;t seen an example yet where it works well. Feel free to discuss this with me on Twitter &lt;a href=&quot;https://twitter.com/jxnblk&quot; class=&quot;css-1o1roib&quot;&gt;@jxnblk&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Microbeats is the Best Journal I’ve Ever Kept]]></title><description><![CDATA[I’ve been producing electronic music on my computer for about a decade now, and I don’t have a whole lot to show for it. After moving to DC…]]></description><link>https://jxnblk.com/blog/microbeats-is-the-best-journal-ive-ever-kept/</link><guid isPermaLink="false">https://jxnblk.com/blog/microbeats-is-the-best-journal-ive-ever-kept/</guid><pubDate>Wed, 07 Nov 2012 00:00:00 GMT</pubDate><content:encoded>&lt;style data-emotion-css=&quot;1fq9m1p&quot;&gt;body{color:#000;background-color:#fff;}body.theme-ui-dark{color:#fff;background-color:#000;}&lt;/style&gt;&lt;style data-emotion-css=&quot;1bl1570&quot;&gt;.css-1bl1570{font-size:18px;margin:0;margin-bottom:32px;}@media screen and (min-width:40em){.css-1bl1570{font-size:20px;}}&lt;/style&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;I’ve been producing electronic music on my computer for about a decade now, and I don’t have a whole lot to show for it. After moving to DC from Shanghai, where I played a lot of live sets and DJ gigs, I realized there wasn’t much of a music scene in DC, and I stopped playing out. After a few years, I noticed that I generally wasn’t being inspired, and I wasn’t growing much as an artist. I also noticed that I had a tendency to never finish the tracks that I’d started. I was pretty good at creating catchy little loops, but they never evolved into anything beyond that.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;To try to pull myself out of this rut, I started a Tumblr called Loop A Day in early 2011. The idea was that I would spend no more than an hour each day creating a loop and posting it to this blog. I kept up with it for about a month, then I realized that the daily routine was wrecking my social life – I remember leaving parties more than once just to go home and work on music. I did like the hour limitation, but doing it every day had to stop. So, I got rid of my self-imposed quota and renamed the project Microbeats.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;A lot of the earlier beats I created were technical experimentations, and I drew a lot of inspiration from the music I was listening to. Then I started noticing something happening. I started subconsciously pulling inspiration from my actual life and putting more emotion into the beats I was creating. By the end of 2011, I started consciously pulling inspiration from the things I was doing, the places I was going, the people I was meeting and the conversations I was having and using that as mental fodder when I sat down to work on a beat.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;It may not be obvious to the outside observer, but for me, Microbeats became a record of all the things happening in my life – though some beats are admittedly (and intentionally) vulnerable. Conversations from friends’ parties, meeting new people, getting dumped, rebounding, breaking my hand, traveling for work, vacationing with family, moving to a new city, and everything in between – my life started to manifest itself in the music.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;Though I don’t do it very often, when I go back through the archives and listen to the beats, I start remembering things that I don’t think I would have otherwise – strange, nuanced emotions and small moments that my brain didn’t deem important enough to take good record of. Microbeats started off as a simple little experiment, but it’s grown into something so much bigger, personally, than I ever would’ve imagined.&lt;/p&gt;&lt;p class=&quot;css-1bl1570&quot;&gt;&lt;style data-emotion-css=&quot;1o1roib&quot;&gt;.css-1o1roib{color:#33e;}.css-1o1roib:hover{color:#228;}&lt;/style&gt;&lt;a href=&quot;http://microbeats.cc&quot; class=&quot;css-1o1roib&quot;&gt;microbeats.cc&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>